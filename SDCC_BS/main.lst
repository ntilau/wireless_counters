gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 9-7-2010  18:33:38
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                                           ; This file was generated Tue Sep 07 18:33:38 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	__config 0x300001, 0xb8
                                           	__config 0x300002, 0xf9
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0x7d
                                           	__config 0x300006, 0x81
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _checksum
                                           	global _round
                                           	global _fifo
                                           	global _idx
                                           	global _timeOut
                                           	global _Port1
                                           	global _Port2
                                           	global _Port3
                                           	global _Port4
                                           	global _delay_us
                                           	global _delay_ms
                                           	global _delay_s
                                           	global _blinkLed
                                           	global _spi_trx
                                           	global _wr_register
                                           	global _wr_command
                                           	global _en_rx
                                           	global _en_tx
                                           	global _en_idle
                                           	global _timer0_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay1ktcy
                                           	extern _delay1mtcy
                                           	extern __mulint
                                           	extern __divuint
                                           	extern __moduint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _checksum	db	0x00
                                           _round	db	0x01
                                           _idx	db	0x00
                                           _Port1	db	0x00, 0x00, 0x00, 0x00
                                           _Port2	db	0x00, 0x00, 0x00, 0x00
                                           _Port3	db	0x00, 0x00, 0x00, 0x00
                                           _Port4	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           udata_main_0	udata
                                           _timeOut	res	1
                                           
                                           udata_main_1	udata
                                           _fifo	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x1_timer0_isr	code	0X000008
                                           ivec_0x1_timer0_isr:
000008   ef03     goto	0xc06               	GOTO	_timer0_isr
00000a   f006
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	222; main.c	OSCCONbits.IRCF = 7;
00000c   50d3     movf	0xd3, 0, 0          	MOVF	_OSCCONbits, W
00000e   0b8f     andlw	0x8f               	ANDLW	0x8f
000010   0970     iorlw	0x70               	IORLW	0x70
000012   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCONbits
                                           ;	.line	223; main.c	delay1ktcy(1);
000014   0e01     movlw	0x1                	MOVLW	0x01
000016   ecf0     call	0x7e0, 0            	CALL	_delay1ktcy
000018   f003
                                           ;	.line	225; main.c	ADCON1 = 0x0F;
00001a   0e0f     movlw	0xf                	MOVLW	0x0f
00001c   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	229; main.c	PS1_1_TRIS = 0;
00001e   9e93     bcf	0x93, 0x7, 0         	BCF	_TRISBbits, 7
                                           ;	.line	230; main.c	PS1_2_TRIS = 0;
000020   9c93     bcf	0x93, 0x6, 0         	BCF	_TRISBbits, 6
                                           ;	.line	231; main.c	PS1_3_TRIS = 0;
000022   9a93     bcf	0x93, 0x5, 0         	BCF	_TRISBbits, 5
                                           ;	.line	232; main.c	PS1_4_TRIS = 0;
000024   9893     bcf	0x93, 0x4, 0         	BCF	_TRISBbits, 4
                                           ;	.line	234; main.c	PS2_1_TRIS = 0;
000026   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	235; main.c	PS2_2_TRIS = 0;
000028   9092     bcf	0x92, 0, 0           	BCF	_TRISAbits, 0
                                           ;	.line	236; main.c	PS2_3_TRIS = 0;
00002a   9292     bcf	0x92, 0x1, 0         	BCF	_TRISAbits, 1
                                           ;	.line	237; main.c	PS2_4_TRIS = 0;
00002c   9492     bcf	0x92, 0x2, 0         	BCF	_TRISAbits, 2
                                           ;	.line	239; main.c	PS3_1_TRIS = 0;
00002e   9692     bcf	0x92, 0x3, 0         	BCF	_TRISAbits, 3
                                           ;	.line	240; main.c	PS3_2_TRIS = 0;
000030   9892     bcf	0x92, 0x4, 0         	BCF	_TRISAbits, 4
                                           ;	.line	241; main.c	PS3_3_TRIS = 0;
000032   9a92     bcf	0x92, 0x5, 0         	BCF	_TRISAbits, 5
                                           ;	.line	242; main.c	PS3_4_TRIS = 0;
000034   9096     bcf	0x96, 0, 0           	BCF	_TRISEbits, 0
                                           ;	.line	244; main.c	PS4_1_TRIS = 0;
000036   9296     bcf	0x96, 0x1, 0         	BCF	_TRISEbits, 1
                                           ;	.line	245; main.c	PS4_2_TRIS = 0;
000038   9496     bcf	0x96, 0x2, 0         	BCF	_TRISEbits, 2
                                           ;	.line	246; main.c	PS4_3_TRIS = 0;
00003a   9e95     bcf	0x95, 0x7, 0         	BCF	_TRISDbits, 7
                                           ;	.line	247; main.c	PS4_4_TRIS = 0;
00003c   9c95     bcf	0x95, 0x6, 0         	BCF	_TRISDbits, 6
                                           ;	.line	249; main.c	PS1_1 = 0;
00003e   9e81     bcf	0x81, 0x7, 0         	BCF	_PORTBbits, 7
                                           ;	.line	250; main.c	PS1_2 = 0;
000040   9c81     bcf	0x81, 0x6, 0         	BCF	_PORTBbits, 6
                                           ;	.line	251; main.c	PS1_3 = 0;
000042   9a81     bcf	0x81, 0x5, 0         	BCF	_PORTBbits, 5
                                           ;	.line	252; main.c	PS1_4 = 0;
000044   9881     bcf	0x81, 0x4, 0         	BCF	_PORTBbits, 4
                                           ;	.line	254; main.c	PS2_1 = 0;
000046   9681     bcf	0x81, 0x3, 0         	BCF	_PORTBbits, 3
                                           ;	.line	255; main.c	PS2_2 = 0;
000048   9080     bcf	0x80, 0, 0           	BCF	_PORTAbits, 0
                                           ;	.line	256; main.c	PS2_3 = 0;
00004a   9280     bcf	0x80, 0x1, 0         	BCF	_PORTAbits, 1
                                           ;	.line	257; main.c	PS2_4 = 0;
00004c   9480     bcf	0x80, 0x2, 0         	BCF	_PORTAbits, 2
                                           ;	.line	259; main.c	PS3_1 = 0;
00004e   9680     bcf	0x80, 0x3, 0         	BCF	_PORTAbits, 3
                                           ;	.line	260; main.c	PS3_2 = 0;
000050   9880     bcf	0x80, 0x4, 0         	BCF	_PORTAbits, 4
                                           ;	.line	261; main.c	PS3_3 = 0;
000052   9a80     bcf	0x80, 0x5, 0         	BCF	_PORTAbits, 5
                                           ;	.line	262; main.c	PS3_4 = 0;
000054   9084     bcf	0x84, 0, 0           	BCF	_PORTEbits, 0
                                           ;	.line	264; main.c	PS4_1 = 0;
000056   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
                                           ;	.line	265; main.c	PS4_2 = 0;
000058   9484     bcf	0x84, 0x2, 0         	BCF	_PORTEbits, 2
                                           ;	.line	266; main.c	PS4_3 = 0;
00005a   9e83     bcf	0x83, 0x7, 0         	BCF	_PORTDbits, 7
                                           ;	.line	267; main.c	PS4_4 = 0;
00005c   9c83     bcf	0x83, 0x6, 0         	BCF	_PORTDbits, 6
                                           ;	.line	270; main.c	unused1_TRIS = 0;
00005e   9a95     bcf	0x95, 0x5, 0         	BCF	_TRISDbits, 5
                                           ;	.line	271; main.c	unused2_TRIS = 0;
000060   9895     bcf	0x95, 0x4, 0         	BCF	_TRISDbits, 4
                                           ;	.line	272; main.c	unused3_TRIS = 0;
000062   9695     bcf	0x95, 0x3, 0         	BCF	_TRISDbits, 3
                                           ;	.line	273; main.c	unused4_TRIS = 0;
000064   9495     bcf	0x95, 0x2, 0         	BCF	_TRISDbits, 2
                                           ;	.line	274; main.c	unused5_TRIS = 0;
000066   9295     bcf	0x95, 0x1, 0         	BCF	_TRISDbits, 1
                                           ;	.line	275; main.c	unused6_TRIS = 0;
000068   9095     bcf	0x95, 0, 0           	BCF	_TRISDbits, 0
                                           ;	.line	277; main.c	unused1 = 0;
00006a   9a83     bcf	0x83, 0x5, 0         	BCF	_PORTDbits, 5
                                           ;	.line	278; main.c	unused2 = 0;
00006c   9883     bcf	0x83, 0x4, 0         	BCF	_PORTDbits, 4
                                           ;	.line	279; main.c	unused3 = 0;
00006e   9683     bcf	0x83, 0x3, 0         	BCF	_PORTDbits, 3
                                           ;	.line	280; main.c	unused4 = 0;
000070   9483     bcf	0x83, 0x2, 0         	BCF	_PORTDbits, 2
                                           ;	.line	281; main.c	unused5 = 0;
000072   9283     bcf	0x83, 0x1, 0         	BCF	_PORTDbits, 1
                                           ;	.line	282; main.c	unused6 = 0;
000074   9083     bcf	0x83, 0, 0           	BCF	_PORTDbits, 0
                                           ;	.line	285; main.c	TRISAbits.TRISA6 = 0; // LED output
000076   9c92     bcf	0x92, 0x6, 0         	BCF	_TRISAbits, 6
                                           ;	.line	286; main.c	LED = 0; // output low
000078   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           ;	.line	289; main.c	TRISCbits.TRISC0 = 0; // nRES
00007a   9094     bcf	0x94, 0, 0           	BCF	_TRISCbits, 0
                                           ;	.line	290; main.c	TRISCbits.TRISC1 = 0; // nFFS
00007c   9294     bcf	0x94, 0x1, 0         	BCF	_TRISCbits, 1
                                           ;	.line	291; main.c	nRES = 1;
00007e   8082     bsf	0x82, 0, 0           	BSF	_PORTCbits, 0
                                           ;	.line	292; main.c	nFFS = 1;
000080   8282     bsf	0x82, 0x1, 0         	BSF	_PORTCbits, 1
                                           ;	.line	314; main.c	TRISCbits.TRISC5 = 0; // SDO
000082   9a94     bcf	0x94, 0x5, 0         	BCF	_TRISCbits, 5
                                           ;	.line	315; main.c	TRISCbits.TRISC4 = 1; // SDI
000084   8894     bsf	0x94, 0x4, 0         	BSF	_TRISCbits, 4
                                           ;	.line	316; main.c	TRISCbits.TRISC3 = 0; // SCK
000086   9694     bcf	0x94, 0x3, 0         	BCF	_TRISCbits, 3
                                           ;	.line	317; main.c	TRISCbits.TRISC2 = 0; // nSEL
000088   9494     bcf	0x94, 0x2, 0         	BCF	_TRISCbits, 2
                                           ;	.line	318; main.c	nSEL = 1;
00008a   8482     bsf	0x82, 0x2, 0         	BSF	_PORTCbits, 2
                                           ;	.line	319; main.c	SSPCON1bits.SSPEN = 1; // enable SPI
00008c   8ac6     bsf	0xc6, 0x5, 0         	BSF	_SSPCON1bits, 5
                                           ;	.line	320; main.c	SSPCON1bits.CKP = 0; // idle bit low
00008e   98c6     bcf	0xc6, 0x4, 0         	BCF	_SSPCON1bits, 4
                                           ;	.line	321; main.c	SSPCON1bits.SSPM0 = 0; // cleared Fosc/4 master mode. set for Fosc/16
000090   90c6     bcf	0xc6, 0, 0           	BCF	_SSPCON1bits, 0
                                           ;	.line	322; main.c	SSPSTATbits.SMP = 0; // sampled in the middle
000092   9ec7     bcf	0xc7, 0x7, 0         	BCF	_SSPSTATbits, 7
                                           ;	.line	323; main.c	SSPSTATbits.CKE = 1; // transmit for idle to active
000094   8cc7     bsf	0xc7, 0x6, 0         	BSF	_SSPSTATbits, 6
                                           ;	.line	324; main.c	SSPCON1bits.WCOL = 0;
000096   9ec6     bcf	0xc6, 0x7, 0         	BCF	_SSPCON1bits, 7
                                           ;	.line	325; main.c	PIE1bits.SSPIE = 1; // enable SPI flag
000098   869d     bsf	0x9d, 0x3, 0         	BSF	_PIE1bits, 3
                                           ;	.line	328; main.c	delay_ms(100);
00009a   0e00     movlw	0                  	MOVLW	0x00
00009c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00009e   0e64     movlw	0x64               	MOVLW	0x64
0000a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000a2   ec03     call	0x806, 0            	CALL	_delay_ms
0000a4   f004
0000a6   0e02     movlw	0x2                	MOVLW	0x02
0000a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	329; main.c	nRES = 0;
0000aa   9082     bcf	0x82, 0, 0           	BCF	_PORTCbits, 0
                                           ;	.line	330; main.c	delay_ms(10);
0000ac   0e00     movlw	0                  	MOVLW	0x00
0000ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b0   0e0a     movlw	0xa                	MOVLW	0x0a
0000b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b4   ec03     call	0x806, 0            	CALL	_delay_ms
0000b6   f004
0000b8   0e02     movlw	0x2                	MOVLW	0x02
0000ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	331; main.c	nRES = 1;
0000bc   8082     bsf	0x82, 0, 0           	BSF	_PORTCbits, 0
                                           ;	.line	332; main.c	delay_ms(100);
0000be   0e00     movlw	0                  	MOVLW	0x00
0000c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c2   0e64     movlw	0x64               	MOVLW	0x64
0000c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c6   ec03     call	0x806, 0            	CALL	_delay_ms
0000c8   f004
0000ca   0e02     movlw	0x2                	MOVLW	0x02
0000cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	333; main.c	wr_command(0x00, 0x00); // clear POR interrupt by getting status
0000ce   0e00     movlw	0                  	MOVLW	0x00
0000d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000d2   0e00     movlw	0                  	MOVLW	0x00
0000d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000d6   ec5e     call	0xcbc, 0            	CALL	_wr_command
0000d8   f006
0000da   0e02     movlw	0x2                	MOVLW	0x02
0000dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	334; main.c	delay_ms(100);
0000de   0e00     movlw	0                  	MOVLW	0x00
0000e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e2   0e64     movlw	0x64               	MOVLW	0x64
0000e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e6   ec03     call	0x806, 0            	CALL	_delay_ms
0000e8   f004
0000ea   0e02     movlw	0x2                	MOVLW	0x02
0000ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	337; main.c	wr_command(0x80, 0x28); // Config setting command all FIFO + 868 + 12.5pF
0000ee   0e28     movlw	0x28               	MOVLW	0x28
0000f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f2   0e80     movlw	0x80               	MOVLW	0x80
0000f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f6   ec5e     call	0xcbc, 0            	CALL	_wr_command
0000f8   f006
0000fa   0e02     movlw	0x2                	MOVLW	0x02
0000fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; main.c	wr_command(0x82, 0x09); // Power Management Command. Idle + noClkOut
0000fe   0e09     movlw	0x9                	MOVLW	0x09
000100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000102   0e82     movlw	0x82               	MOVLW	0x82
000104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000106   ec5e     call	0xcbc, 0            	CALL	_wr_command
000108   f006
00010a   0e02     movlw	0x2                	MOVLW	0x02
00010c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	339; main.c	wr_command(0xCA, 0x82); // FIFO fill when Synchon Pattern received. 2 bytes Synchon
00010e   0e82     movlw	0x82               	MOVLW	0x82
000110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000112   0eca     movlw	0xca               	MOVLW	0xca
000114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000116   ec5e     call	0xcbc, 0            	CALL	_wr_command
000118   f006
00011a   0e02     movlw	0x2                	MOVLW	0x02
00011c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	340; main.c	wr_command(0xCE, 0xA5); // Set 2nd byte to 0xA5
00011e   0ea5     movlw	0xa5               	MOVLW	0xa5
000120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000122   0ece     movlw	0xce               	MOVLW	0xce
000124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000126   ec5e     call	0xcbc, 0            	CALL	_wr_command
000128   f006
00012a   0e02     movlw	0x2                	MOVLW	0x02
00012c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	343; main.c	T0CONbits.T08BIT = 0;
00012e   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	344; main.c	T0CONbits.T0CS = 0;
000130   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	345; main.c	T0CONbits.PSA = 0;
000132   96d5     bcf	0xd5, 0x3, 0         	BCF	_T0CONbits, 3
                                           ;	.line	346; main.c	T0CONbits.T0PS0 = 1;
000134   80d5     bsf	0xd5, 0, 0           	BSF	_T0CONbits, 0
                                           ;	.line	347; main.c	T0CONbits.T0PS1 = 1;
000136   82d5     bsf	0xd5, 0x1, 0         	BSF	_T0CONbits, 1
                                           ;	.line	348; main.c	T0CONbits.T0PS2 = 1;
000138   84d5     bsf	0xd5, 0x2, 0         	BSF	_T0CONbits, 2
                                           ;	.line	349; main.c	T0CONbits.TMR0ON = 0;
00013a   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	350; main.c	INTCONbits.TMR0IF = 0;
00013c   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	351; main.c	INTCONbits.TMR0IE = 1;
00013e   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	352; main.c	INTCONbits.GIE = 1; // global interrupts
000140   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	354; main.c	blinkLed(5);
000142   0e05     movlw	0x5                	MOVLW	0x05
000144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000146   ec34     call	0xc68, 0            	CALL	_blinkLed
000148   f006
00014a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	356; main.c	round = 0x01;
00014c   0e01     movlw	0x1                	MOVLW	0x01
00014e   0100     movlb	0                  	BANKSEL	_round
000150   6f81     movwf	0x81, 0x1          	MOVWF	_round, B
                                           _00258_DS_:
                                           ;	.line	361; main.c	en_tx();
000152   ecc9     call	0xd92, 0            	CALL	_en_tx
000154   f006
                                           _00190_DS_:
                                           ;	.line	362; main.c	while(nIRQ);
000156   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
000158   d7fe     bra	0x156                	BRA	_00190_DS_
                                           ;	.line	363; main.c	wr_command(0xB8, 0x2D);
00015a   0e2d     movlw	0x2d               	MOVLW	0x2d
00015c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00015e   0eb8     movlw	0xb8               	MOVLW	0xb8
000160   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000162   ec5e     call	0xcbc, 0            	CALL	_wr_command
000164   f006
000166   0e02     movlw	0x2                	MOVLW	0x02
000168   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00193_DS_:
                                           ;	.line	364; main.c	while(nIRQ);
00016a   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
00016c   d7fe     bra	0x16a                	BRA	_00193_DS_
                                           ;	.line	365; main.c	wr_command(0xB8, 0xA5);
00016e   0ea5     movlw	0xa5               	MOVLW	0xa5
000170   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000172   0eb8     movlw	0xb8               	MOVLW	0xb8
000174   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000176   ec5e     call	0xcbc, 0            	CALL	_wr_command
000178   f006
00017a   0e02     movlw	0x2                	MOVLW	0x02
00017c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00196_DS_:
                                           ;	.line	366; main.c	while(nIRQ);
00017e   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
000180   d7fe     bra	0x17e                	BRA	_00196_DS_
                                           ;	.line	367; main.c	wr_command(0xB8, 0x5A);
000182   0e5a     movlw	0x5a               	MOVLW	0x5a
000184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000186   0eb8     movlw	0xb8               	MOVLW	0xb8
000188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018a   ec5e     call	0xcbc, 0            	CALL	_wr_command
00018c   f006
00018e   0e02     movlw	0x2                	MOVLW	0x02
000190   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00199_DS_:
                                           ;	.line	368; main.c	while(nIRQ);
000192   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
000194   d7fe     bra	0x192                	BRA	_00199_DS_
000196   0100     movlb	0                  	BANKSEL	_round
                                           ;	.line	369; main.c	wr_command(0xB8, round);
000198   5181     movf	0x81, 0, 0x1        	MOVF	_round, W, B
00019a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019c   0eb8     movlw	0xb8               	MOVLW	0xb8
00019e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001a0   ec5e     call	0xcbc, 0            	CALL	_wr_command
0001a2   f006
0001a4   0e02     movlw	0x2                	MOVLW	0x02
0001a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00202_DS_:
                                           ;	.line	370; main.c	while(nIRQ);
0001a8   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
0001aa   d7fe     bra	0x1a8                	BRA	_00202_DS_
                                           ;	.line	371; main.c	wr_command(0xB8, 0xEF);
0001ac   0eef     movlw	0xef               	MOVLW	0xef
0001ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b0   0eb8     movlw	0xb8               	MOVLW	0xb8
0001b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b4   ec5e     call	0xcbc, 0            	CALL	_wr_command
0001b6   f006
0001b8   0e02     movlw	0x2                	MOVLW	0x02
0001ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00205_DS_:
                                           ;	.line	372; main.c	while(nIRQ);
0001bc   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
0001be   d7fe     bra	0x1bc                	BRA	_00205_DS_
                                           ;	.line	373; main.c	en_idle();
0001c0   ecb2     call	0xd64, 0            	CALL	_en_idle
0001c2   f006
0001c4   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	376; main.c	idx = 0;
0001c6   6b82     clrf	0x82, 0x1           	CLRF	_idx, B
                                           ;	.line	377; main.c	en_rx();
0001c8   ece0     call	0xdc0, 0            	CALL	_en_rx
0001ca   f006
0001cc   0100     movlb	0                  	BANKSEL	_timeOut
                                           ;	.line	378; main.c	timeOut = 0;
0001ce   6ba0     clrf	0xa0, 0x1           	CLRF	_timeOut, B
                                           ;	.line	379; main.c	T0CONbits.TMR0ON = 1;
0001d0   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	380; main.c	TMR0H = 0xF0;
0001d2   0ef0     movlw	0xf0               	MOVLW	0xf0
0001d4   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	381; main.c	TMR0L = 0x00;
0001d6   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           _00211_DS_:
                                           ;	.line	382; main.c	while( (idx < 6) & !timeOut){
0001d8   0e06     movlw	0x6                	MOVLW	0x06
0001da   0100     movlb	0                  	BANKSEL	_idx
0001dc   5d82     subwf	0x82, 0, 0x1       	SUBWF	_idx, W, B
0001de   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
0001e0   6a00     clrf	0, 0                	CLRF	r0x00
0001e2   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0001e4   0100     movlb	0                  	BANKSEL	_timeOut
0001e6   51a0     movf	0xa0, 0, 0x1        	MOVF	_timeOut, W, B
0001e8   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0001ea   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0001ec   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0001ee   6a01     clrf	0x1, 0              	CLRF	r0x01
0001f0   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
0001f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001f4   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0001f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001f8   e02c     bz	0x252                 	BZ	_00213_DS_
                                           _00208_DS_:
                                           ;	.line	383; main.c	while(!FFIT & !timeOut);
0001fa   6a00     clrf	0, 0                	CLRF	r0x00
0001fc   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0001fe   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000200   5000     movf	0, 0, 0             	MOVF	r0x00, W
000202   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000204   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000206   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000208   6a00     clrf	0, 0                	CLRF	r0x00
00020a   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00020c   0100     movlb	0                  	BANKSEL	_timeOut
00020e   51a0     movf	0xa0, 0, 0x1        	MOVF	_timeOut, W, B
000210   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000212   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000214   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000216   6a01     clrf	0x1, 0              	CLRF	r0x01
000218   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00021a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00021c   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00021e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000220   e1ec     bnz	0x1fa                	BNZ	_00208_DS_
                                           ;	.line	384; main.c	nFFS = 0;
000222   9282     bcf	0x82, 0x1, 0         	BCF	_PORTCbits, 1
                                           ;	.line	385; main.c	fifo[idx++] = spi_trx(0x00);
000224   c082     movff	0x82, 0            	MOVFF	_idx, r0x00
000226   f000
000228   0100     movlb	0                  	BANKSEL	_idx
00022a   2b82     incf	0x82, 0x1, 0x1      	INCF	_idx, F, B
00022c   6a01     clrf	0x1, 0              	CLRF	r0x01
00022e   0e94     movlw	0x94               	MOVLW	LOW(_fifo)
000230   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000232   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
000234   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000236   0e00     movlw	0                  	MOVLW	0x00
000238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023a   ecf7     call	0xdee, 0            	CALL	_spi_trx
00023c   f006
00023e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000240   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000242   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000244   ffe9
000246   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000248   ffea
00024a   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
00024c   ffef
                                           ;	.line	386; main.c	nFFS = 1;
00024e   8282     bsf	0x82, 0x1, 0         	BSF	_PORTCbits, 1
000250   d7c3     bra	0x1d8                	BRA	_00211_DS_
                                           _00213_DS_:
                                           ;	.line	388; main.c	T0CONbits.TMR0ON = 0;
000252   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	389; main.c	en_idle();
000254   ecb2     call	0xd64, 0            	CALL	_en_idle
000256   f006
000258   0100     movlb	0                  	BANKSEL	_timeOut
                                           ;	.line	390; main.c	if(timeOut) {
00025a   51a0     movf	0xa0, 0, 0x1        	MOVF	_timeOut, W, B
00025c   e003     bz	0x264                 	BZ	_00215_DS_
00025e   0100     movlb	0                  	BANKSEL	_timeOut
                                           ;	.line	391; main.c	timeOut = 0;
000260   6ba0     clrf	0xa0, 0x1           	CLRF	_timeOut, B
                                           ;	.line	392; main.c	LED = 1;
000262   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           _00215_DS_:
000264   0100     movlb	0                  	BANKSEL	_fifo
                                           ;	.line	396; main.c	if(fifo[0] == 0x5A)
000266   5194     movf	0x94, 0, 0x1        	MOVF	_fifo, W, B
000268   0a5a     xorlw	0x5a               	XORLW	0x5a
00026a   e001     bz	0x26e                 	BZ	_00332_DS_
00026c   d108     bra	0x47e                	BRA	_00224_DS_
                                           _00332_DS_:
00026e   0100     movlb	0                  	BANKSEL	_checksum
                                           ;	.line	398; main.c	checksum = 0;
000270   6b80     clrf	0x80, 0x1           	CLRF	_checksum, B
                                           ;	.line	399; main.c	for(idx=1; idx<5; idx++)
000272   0e01     movlw	0x1                	MOVLW	0x01
000274   0100     movlb	0                  	BANKSEL	_idx
000276   6f82     movwf	0x82, 0x1          	MOVWF	_idx, B
                                           _00260_DS_:
000278   0e05     movlw	0x5                	MOVLW	0x05
00027a   0100     movlb	0                  	BANKSEL	_idx
00027c   5d82     subwf	0x82, 0, 0x1       	SUBWF	_idx, W, B
00027e   e213     bc	0x2a6                 	BC	_00263_DS_
                                           ;	.line	401; main.c	checksum += fifo[idx];        
000280   0e94     movlw	0x94               	MOVLW	LOW(_fifo)
000282   0100     movlb	0                  	BANKSEL	_idx
000284   2582     addwf	0x82, 0, 0x1       	ADDWF	_idx, W, B
000286   6e00     movwf	0, 0               	MOVWF	r0x00
000288   6a01     clrf	0x1, 0              	CLRF	r0x01
00028a   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
00028c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00028e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000290   ffe9
000292   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000294   ffea
000296   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
000298   f000
00029a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00029c   0100     movlb	0                  	BANKSEL	_checksum
00029e   2780     addwf	0x80, 0x1, 0x1     	ADDWF	_checksum, F, B
0002a0   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	399; main.c	for(idx=1; idx<5; idx++)
0002a2   2b82     incf	0x82, 0x1, 0x1      	INCF	_idx, F, B
0002a4   d7e9     bra	0x278                	BRA	_00260_DS_
                                           _00263_DS_:
0002a6   0100     movlb	0                  	BANKSEL	_checksum
                                           ;	.line	403; main.c	if(checksum == fifo[5])
0002a8   5180     movf	0x80, 0, 0x1        	MOVF	_checksum, W, B
0002aa   0100     movlb	0                  	BANKSEL	(_fifo + 5)
0002ac   1999     xorwf	0x99, 0, 0x1       	XORWF	(_fifo + 5), W, B
0002ae   e001     bz	0x2b2                 	BZ	_00335_DS_
0002b0   d0e6     bra	0x47e                	BRA	_00224_DS_
                                           _00335_DS_:
                                           ;	.line	405; main.c	LED = 1;
0002b2   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	406; main.c	switch(round)
0002b4   0e01     movlw	0x1                	MOVLW	0x01
0002b6   0100     movlb	0                  	BANKSEL	_round
0002b8   5d81     subwf	0x81, 0, 0x1       	SUBWF	_round, W, B
0002ba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0002bc   d0df     bra	0x47c                	BRA	_00220_DS_
0002be   0e05     movlw	0x5                	MOVLW	0x05
0002c0   0100     movlb	0                  	BANKSEL	_round
0002c2   5d81     subwf	0x81, 0, 0x1       	SUBWF	_round, W, B
0002c4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0002c6   d0da     bra	0x47c                	BRA	_00220_DS_
0002c8   0100     movlb	0                  	BANKSEL	_round
0002ca   0581     decf	0x81, 0, 0x1        	DECF	_round, W, B
0002cc   6e00     movwf	0, 0               	MOVWF	r0x00
0002ce   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0002d0   ffe5
0002d2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0002d4   ffe5
0002d6   6a04     clrf	0x4, 0              	CLRF	r0x04
0002d8   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
0002da   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
0002dc   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0002de   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
0002e0   0bfc     andlw	0xfc               	ANDLW	0xfc
0002e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002e4   0e00     movlw	0                  	MOVLW	UPPER(_00338_DS_)
0002e6   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0002e8   0e03     movlw	0x3                	MOVLW	HIGH(_00338_DS_)
0002ea   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0002ec   0e04     movlw	0x4                	MOVLW	LOW(_00338_DS_)
0002ee   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0002f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002f2   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0002f4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0002f6   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0002f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002fa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0002fc   f004
0002fe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000300   f003
000302   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00338_DS_:
000304   ef8a     goto	0x314               	GOTO	_00216_DS_
000306   f001
000308   efb7     goto	0x36e               	GOTO	_00217_DS_
00030a   f001
00030c   efe4     goto	0x3c8               	GOTO	_00218_DS_
00030e   f001
000310   ef11     goto	0x422               	GOTO	_00219_DS_
000312   f002
                                           _00216_DS_:
000314   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	409; main.c	for(idx=0; idx<4; idx++) Port1[idx]+=fifo[idx+1];
000316   6b82     clrf	0x82, 0x1           	CLRF	_idx, B
                                           _00264_DS_:
000318   0e04     movlw	0x4                	MOVLW	0x04
00031a   0100     movlb	0                  	BANKSEL	_idx
00031c   5d82     subwf	0x82, 0, 0x1       	SUBWF	_idx, W, B
00031e   e227     bc	0x36e                 	BC	_00217_DS_
000320   0e83     movlw	0x83               	MOVLW	LOW(_Port1)
000322   0100     movlb	0                  	BANKSEL	_idx
000324   2582     addwf	0x82, 0, 0x1       	ADDWF	_idx, W, B
000326   6e00     movwf	0, 0               	MOVWF	r0x00
000328   6a01     clrf	0x1, 0              	CLRF	r0x01
00032a   0e00     movlw	0                  	MOVLW	HIGH(_Port1)
00032c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00032e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000330   ffe9
000332   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000334   ffea
000336   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000338   f002
00033a   0100     movlb	0                  	BANKSEL	_idx
00033c   2982     incf	0x82, 0, 0x1        	INCF	_idx, W, B
00033e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000340   0e94     movlw	0x94               	MOVLW	LOW(_fifo)
000342   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
000344   6e04     movwf	0x4, 0             	MOVWF	r0x04
000346   6a05     clrf	0x5, 0              	CLRF	r0x05
000348   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
00034a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00034c   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00034e   ffe9
000350   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
000352   ffea
000354   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
000356   f004
000358   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00035a   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00035c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00035e   ffe9
000360   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000362   ffea
000364   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
000366   ffef
000368   c003     movff	0x3, 0x82          	MOVFF	r0x03, _idx
00036a   f082
00036c   d7d5     bra	0x318                	BRA	_00264_DS_
                                           _00217_DS_:
00036e   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	411; main.c	for(idx=0; idx<4; idx++) Port2[idx]+=fifo[idx+1];
000370   6b82     clrf	0x82, 0x1           	CLRF	_idx, B
                                           _00268_DS_:
000372   0e04     movlw	0x4                	MOVLW	0x04
000374   0100     movlb	0                  	BANKSEL	_idx
000376   5d82     subwf	0x82, 0, 0x1       	SUBWF	_idx, W, B
000378   e227     bc	0x3c8                 	BC	_00218_DS_
00037a   0e87     movlw	0x87               	MOVLW	LOW(_Port2)
00037c   0100     movlb	0                  	BANKSEL	_idx
00037e   2582     addwf	0x82, 0, 0x1       	ADDWF	_idx, W, B
000380   6e00     movwf	0, 0               	MOVWF	r0x00
000382   6a01     clrf	0x1, 0              	CLRF	r0x01
000384   0e00     movlw	0                  	MOVLW	HIGH(_Port2)
000386   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000388   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00038a   ffe9
00038c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00038e   ffea
000390   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000392   f002
000394   0100     movlb	0                  	BANKSEL	_idx
000396   2982     incf	0x82, 0, 0x1        	INCF	_idx, W, B
000398   6e03     movwf	0x3, 0             	MOVWF	r0x03
00039a   0e94     movlw	0x94               	MOVLW	LOW(_fifo)
00039c   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
00039e   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003a0   6a05     clrf	0x5, 0              	CLRF	r0x05
0003a2   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
0003a4   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0003a6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0003a8   ffe9
0003aa   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0003ac   ffea
0003ae   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
0003b0   f004
0003b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003b4   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0003b6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0003b8   ffe9
0003ba   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0003bc   ffea
0003be   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
0003c0   ffef
0003c2   c003     movff	0x3, 0x82          	MOVFF	r0x03, _idx
0003c4   f082
0003c6   d7d5     bra	0x372                	BRA	_00268_DS_
                                           _00218_DS_:
0003c8   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	413; main.c	for(idx=0; idx<4; idx++) Port3[idx]+=fifo[idx+1];
0003ca   6b82     clrf	0x82, 0x1           	CLRF	_idx, B
                                           _00272_DS_:
0003cc   0e04     movlw	0x4                	MOVLW	0x04
0003ce   0100     movlb	0                  	BANKSEL	_idx
0003d0   5d82     subwf	0x82, 0, 0x1       	SUBWF	_idx, W, B
0003d2   e227     bc	0x422                 	BC	_00219_DS_
0003d4   0e8b     movlw	0x8b               	MOVLW	LOW(_Port3)
0003d6   0100     movlb	0                  	BANKSEL	_idx
0003d8   2582     addwf	0x82, 0, 0x1       	ADDWF	_idx, W, B
0003da   6e00     movwf	0, 0               	MOVWF	r0x00
0003dc   6a01     clrf	0x1, 0              	CLRF	r0x01
0003de   0e00     movlw	0                  	MOVLW	HIGH(_Port3)
0003e0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0003e2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0003e4   ffe9
0003e6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0003e8   ffea
0003ea   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
0003ec   f002
0003ee   0100     movlb	0                  	BANKSEL	_idx
0003f0   2982     incf	0x82, 0, 0x1        	INCF	_idx, W, B
0003f2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003f4   0e94     movlw	0x94               	MOVLW	LOW(_fifo)
0003f6   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
0003f8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003fa   6a05     clrf	0x5, 0              	CLRF	r0x05
0003fc   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
0003fe   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000400   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000402   ffe9
000404   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
000406   ffea
000408   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
00040a   f004
00040c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00040e   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000410   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000412   ffe9
000414   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000416   ffea
000418   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
00041a   ffef
00041c   c003     movff	0x3, 0x82          	MOVFF	r0x03, _idx
00041e   f082
000420   d7d5     bra	0x3cc                	BRA	_00272_DS_
                                           _00219_DS_:
000422   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	415; main.c	for(idx=0; idx<4; idx++) Port4[idx]+=fifo[idx+1];
000424   6b82     clrf	0x82, 0x1           	CLRF	_idx, B
                                           _00276_DS_:
000426   0e04     movlw	0x4                	MOVLW	0x04
000428   0100     movlb	0                  	BANKSEL	_idx
00042a   5d82     subwf	0x82, 0, 0x1       	SUBWF	_idx, W, B
00042c   e227     bc	0x47c                 	BC	_00220_DS_
00042e   0e8f     movlw	0x8f               	MOVLW	LOW(_Port4)
000430   0100     movlb	0                  	BANKSEL	_idx
000432   2582     addwf	0x82, 0, 0x1       	ADDWF	_idx, W, B
000434   6e00     movwf	0, 0               	MOVWF	r0x00
000436   6a01     clrf	0x1, 0              	CLRF	r0x01
000438   0e00     movlw	0                  	MOVLW	HIGH(_Port4)
00043a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00043c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00043e   ffe9
000440   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000442   ffea
000444   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000446   f002
000448   0100     movlb	0                  	BANKSEL	_idx
00044a   2982     incf	0x82, 0, 0x1        	INCF	_idx, W, B
00044c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00044e   0e94     movlw	0x94               	MOVLW	LOW(_fifo)
000450   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
000452   6e04     movwf	0x4, 0             	MOVWF	r0x04
000454   6a05     clrf	0x5, 0              	CLRF	r0x05
000456   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
000458   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00045a   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00045c   ffe9
00045e   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
000460   ffea
000462   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
000464   f004
000466   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000468   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00046a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00046c   ffe9
00046e   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000470   ffea
000472   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
000474   ffef
000476   c003     movff	0x3, 0x82          	MOVFF	r0x03, _idx
000478   f082
00047a   d7d5     bra	0x426                	BRA	_00276_DS_
                                           _00220_DS_:
                                           ;	.line	417; main.c	LED = 0;
00047c   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00224_DS_:
00047e   0100     movlb	0                  	BANKSEL	_Port1
                                           ;	.line	422; main.c	if(Port1[0])
000480   5183     movf	0x83, 0, 0x1        	MOVF	_Port1, W, B
000482   e012     bz	0x4a8                 	BZ	_00226_DS_
                                           ;	.line	424; main.c	LED = 1;
000484   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	425; main.c	PS1_1 = 1;
000486   8e81     bsf	0x81, 0x7, 0         	BSF	_PORTBbits, 7
                                           ;	.line	426; main.c	delay_ms(1);
000488   0e00     movlw	0                  	MOVLW	0x00
00048a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00048c   0e01     movlw	0x1                	MOVLW	0x01
00048e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000490   ec03     call	0x806, 0            	CALL	_delay_ms
000492   f004
000494   0e02     movlw	0x2                	MOVLW	0x02
000496   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	427; main.c	PS1_1 = 0;
000498   9e81     bcf	0x81, 0x7, 0         	BCF	_PORTBbits, 7
                                           ;	.line	428; main.c	Port1[0]--;
00049a   c083     movff	0x83, 0            	MOVFF	_Port1, r0x00
00049c   f000
00049e   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004a2   0100     movlb	0                  	BANKSEL	_Port1
0004a4   6f83     movwf	0x83, 0x1          	MOVWF	_Port1, B
                                           ;	.line	429; main.c	LED = 0;
0004a6   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00226_DS_:
0004a8   0100     movlb	0                  	BANKSEL	(_Port1 + 1)
                                           ;	.line	431; main.c	if(Port1[1])
0004aa   5184     movf	0x84, 0, 0x1        	MOVF	(_Port1 + 1), W, B
0004ac   e012     bz	0x4d2                 	BZ	_00228_DS_
                                           ;	.line	433; main.c	LED = 1;
0004ae   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	434; main.c	PS1_2 = 1;
0004b0   8c81     bsf	0x81, 0x6, 0         	BSF	_PORTBbits, 6
                                           ;	.line	435; main.c	delay_ms(1);
0004b2   0e00     movlw	0                  	MOVLW	0x00
0004b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004b6   0e01     movlw	0x1                	MOVLW	0x01
0004b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ba   ec03     call	0x806, 0            	CALL	_delay_ms
0004bc   f004
0004be   0e02     movlw	0x2                	MOVLW	0x02
0004c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	436; main.c	PS1_2 = 0;
0004c2   9c81     bcf	0x81, 0x6, 0         	BCF	_PORTBbits, 6
                                           ;	.line	437; main.c	Port1[1]--;
0004c4   c084     movff	0x84, 0            	MOVFF	(_Port1 + 1), r0x00
0004c6   f000
0004c8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004cc   0100     movlb	0                  	BANKSEL	(_Port1 + 1)
0004ce   6f84     movwf	0x84, 0x1          	MOVWF	(_Port1 + 1), B
                                           ;	.line	438; main.c	LED = 0;
0004d0   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00228_DS_:
0004d2   0100     movlb	0                  	BANKSEL	(_Port1 + 2)
                                           ;	.line	440; main.c	if(Port1[2])
0004d4   5185     movf	0x85, 0, 0x1        	MOVF	(_Port1 + 2), W, B
0004d6   e012     bz	0x4fc                 	BZ	_00230_DS_
                                           ;	.line	442; main.c	LED = 1;
0004d8   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	443; main.c	PS1_3 = 1;
0004da   8a81     bsf	0x81, 0x5, 0         	BSF	_PORTBbits, 5
                                           ;	.line	444; main.c	delay_ms(1);
0004dc   0e00     movlw	0                  	MOVLW	0x00
0004de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004e0   0e01     movlw	0x1                	MOVLW	0x01
0004e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004e4   ec03     call	0x806, 0            	CALL	_delay_ms
0004e6   f004
0004e8   0e02     movlw	0x2                	MOVLW	0x02
0004ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	445; main.c	PS1_3 = 0;
0004ec   9a81     bcf	0x81, 0x5, 0         	BCF	_PORTBbits, 5
                                           ;	.line	446; main.c	Port1[2]--;
0004ee   c085     movff	0x85, 0            	MOVFF	(_Port1 + 2), r0x00
0004f0   f000
0004f2   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004f6   0100     movlb	0                  	BANKSEL	(_Port1 + 2)
0004f8   6f85     movwf	0x85, 0x1          	MOVWF	(_Port1 + 2), B
                                           ;	.line	447; main.c	LED = 0;
0004fa   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00230_DS_:
0004fc   0100     movlb	0                  	BANKSEL	(_Port1 + 3)
                                           ;	.line	449; main.c	if(Port1[3])
0004fe   5186     movf	0x86, 0, 0x1        	MOVF	(_Port1 + 3), W, B
000500   e012     bz	0x526                 	BZ	_00232_DS_
                                           ;	.line	451; main.c	LED = 1;
000502   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	452; main.c	PS1_4 = 1;
000504   8881     bsf	0x81, 0x4, 0         	BSF	_PORTBbits, 4
                                           ;	.line	453; main.c	delay_ms(1);
000506   0e00     movlw	0                  	MOVLW	0x00
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   0e01     movlw	0x1                	MOVLW	0x01
00050c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050e   ec03     call	0x806, 0            	CALL	_delay_ms
000510   f004
000512   0e02     movlw	0x2                	MOVLW	0x02
000514   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	454; main.c	PS1_4 = 0;
000516   9881     bcf	0x81, 0x4, 0         	BCF	_PORTBbits, 4
                                           ;	.line	455; main.c	Port1[3]--;
000518   c086     movff	0x86, 0            	MOVFF	(_Port1 + 3), r0x00
00051a   f000
00051c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00051e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000520   0100     movlb	0                  	BANKSEL	(_Port1 + 3)
000522   6f86     movwf	0x86, 0x1          	MOVWF	(_Port1 + 3), B
                                           ;	.line	456; main.c	LED = 0;
000524   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00232_DS_:
000526   0100     movlb	0                  	BANKSEL	_Port2
                                           ;	.line	460; main.c	if(Port2[0])
000528   5187     movf	0x87, 0, 0x1        	MOVF	_Port2, W, B
00052a   e012     bz	0x550                 	BZ	_00234_DS_
                                           ;	.line	462; main.c	LED = 1;
00052c   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	463; main.c	PS2_1 = 1;
00052e   8681     bsf	0x81, 0x3, 0         	BSF	_PORTBbits, 3
                                           ;	.line	464; main.c	delay_ms(1);
000530   0e00     movlw	0                  	MOVLW	0x00
000532   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000534   0e01     movlw	0x1                	MOVLW	0x01
000536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000538   ec03     call	0x806, 0            	CALL	_delay_ms
00053a   f004
00053c   0e02     movlw	0x2                	MOVLW	0x02
00053e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	465; main.c	PS2_1 = 0;
000540   9681     bcf	0x81, 0x3, 0         	BCF	_PORTBbits, 3
                                           ;	.line	466; main.c	Port2[0]--;
000542   c087     movff	0x87, 0            	MOVFF	_Port2, r0x00
000544   f000
000546   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000548   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054a   0100     movlb	0                  	BANKSEL	_Port2
00054c   6f87     movwf	0x87, 0x1          	MOVWF	_Port2, B
                                           ;	.line	467; main.c	LED = 0;
00054e   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00234_DS_:
000550   0100     movlb	0                  	BANKSEL	(_Port2 + 1)
                                           ;	.line	469; main.c	if(Port2[1])
000552   5188     movf	0x88, 0, 0x1        	MOVF	(_Port2 + 1), W, B
000554   e012     bz	0x57a                 	BZ	_00236_DS_
                                           ;	.line	471; main.c	LED = 1;
000556   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	472; main.c	PS2_2 = 1;
000558   8080     bsf	0x80, 0, 0           	BSF	_PORTAbits, 0
                                           ;	.line	473; main.c	delay_ms(1);
00055a   0e00     movlw	0                  	MOVLW	0x00
00055c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00055e   0e01     movlw	0x1                	MOVLW	0x01
000560   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000562   ec03     call	0x806, 0            	CALL	_delay_ms
000564   f004
000566   0e02     movlw	0x2                	MOVLW	0x02
000568   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	474; main.c	PS2_2 = 0;
00056a   9080     bcf	0x80, 0, 0           	BCF	_PORTAbits, 0
                                           ;	.line	475; main.c	Port2[1]--;
00056c   c088     movff	0x88, 0            	MOVFF	(_Port2 + 1), r0x00
00056e   f000
000570   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000572   5000     movf	0, 0, 0             	MOVF	r0x00, W
000574   0100     movlb	0                  	BANKSEL	(_Port2 + 1)
000576   6f88     movwf	0x88, 0x1          	MOVWF	(_Port2 + 1), B
                                           ;	.line	476; main.c	LED = 0;
000578   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00236_DS_:
00057a   0100     movlb	0                  	BANKSEL	(_Port2 + 2)
                                           ;	.line	478; main.c	if(Port2[2])
00057c   5189     movf	0x89, 0, 0x1        	MOVF	(_Port2 + 2), W, B
00057e   e012     bz	0x5a4                 	BZ	_00238_DS_
                                           ;	.line	480; main.c	LED = 1;
000580   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	481; main.c	PS2_3 = 1;
000582   8280     bsf	0x80, 0x1, 0         	BSF	_PORTAbits, 1
                                           ;	.line	482; main.c	delay_ms(1);
000584   0e00     movlw	0                  	MOVLW	0x00
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   0e01     movlw	0x1                	MOVLW	0x01
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   ec03     call	0x806, 0            	CALL	_delay_ms
00058e   f004
000590   0e02     movlw	0x2                	MOVLW	0x02
000592   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	483; main.c	PS2_3 = 0;
000594   9280     bcf	0x80, 0x1, 0         	BCF	_PORTAbits, 1
                                           ;	.line	484; main.c	Port2[2]--;
000596   c089     movff	0x89, 0            	MOVFF	(_Port2 + 2), r0x00
000598   f000
00059a   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00059c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00059e   0100     movlb	0                  	BANKSEL	(_Port2 + 2)
0005a0   6f89     movwf	0x89, 0x1          	MOVWF	(_Port2 + 2), B
                                           ;	.line	485; main.c	LED = 0;
0005a2   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00238_DS_:
0005a4   0100     movlb	0                  	BANKSEL	(_Port2 + 3)
                                           ;	.line	487; main.c	if(Port2[3])
0005a6   518a     movf	0x8a, 0, 0x1        	MOVF	(_Port2 + 3), W, B
0005a8   e012     bz	0x5ce                 	BZ	_00240_DS_
                                           ;	.line	489; main.c	LED = 1;
0005aa   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	490; main.c	PS2_4 = 1;
0005ac   8480     bsf	0x80, 0x2, 0         	BSF	_PORTAbits, 2
                                           ;	.line	491; main.c	delay_ms(1);
0005ae   0e00     movlw	0                  	MOVLW	0x00
0005b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b2   0e01     movlw	0x1                	MOVLW	0x01
0005b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b6   ec03     call	0x806, 0            	CALL	_delay_ms
0005b8   f004
0005ba   0e02     movlw	0x2                	MOVLW	0x02
0005bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	492; main.c	PS2_4 = 0;
0005be   9480     bcf	0x80, 0x2, 0         	BCF	_PORTAbits, 2
                                           ;	.line	493; main.c	Port2[3]--;
0005c0   c08a     movff	0x8a, 0            	MOVFF	(_Port2 + 3), r0x00
0005c2   f000
0005c4   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0005c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005c8   0100     movlb	0                  	BANKSEL	(_Port2 + 3)
0005ca   6f8a     movwf	0x8a, 0x1          	MOVWF	(_Port2 + 3), B
                                           ;	.line	494; main.c	LED = 0;
0005cc   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00240_DS_:
0005ce   0100     movlb	0                  	BANKSEL	_Port3
                                           ;	.line	498; main.c	if(Port3[0])
0005d0   518b     movf	0x8b, 0, 0x1        	MOVF	_Port3, W, B
0005d2   e012     bz	0x5f8                 	BZ	_00242_DS_
                                           ;	.line	500; main.c	LED = 1;
0005d4   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	501; main.c	PS3_1 = 1;
0005d6   8680     bsf	0x80, 0x3, 0         	BSF	_PORTAbits, 3
                                           ;	.line	502; main.c	delay_ms(1);
0005d8   0e00     movlw	0                  	MOVLW	0x00
0005da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005dc   0e01     movlw	0x1                	MOVLW	0x01
0005de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005e0   ec03     call	0x806, 0            	CALL	_delay_ms
0005e2   f004
0005e4   0e02     movlw	0x2                	MOVLW	0x02
0005e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	503; main.c	PS3_1 = 0;
0005e8   9680     bcf	0x80, 0x3, 0         	BCF	_PORTAbits, 3
                                           ;	.line	504; main.c	Port3[0]--;
0005ea   c08b     movff	0x8b, 0            	MOVFF	_Port3, r0x00
0005ec   f000
0005ee   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0005f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005f2   0100     movlb	0                  	BANKSEL	_Port3
0005f4   6f8b     movwf	0x8b, 0x1          	MOVWF	_Port3, B
                                           ;	.line	505; main.c	LED = 0;
0005f6   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00242_DS_:
0005f8   0100     movlb	0                  	BANKSEL	(_Port3 + 1)
                                           ;	.line	507; main.c	if(Port3[1])
0005fa   518c     movf	0x8c, 0, 0x1        	MOVF	(_Port3 + 1), W, B
0005fc   e012     bz	0x622                 	BZ	_00244_DS_
                                           ;	.line	509; main.c	LED = 1;
0005fe   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	510; main.c	PS3_2 = 1;
000600   8880     bsf	0x80, 0x4, 0         	BSF	_PORTAbits, 4
                                           ;	.line	511; main.c	delay_ms(1);
000602   0e00     movlw	0                  	MOVLW	0x00
000604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000606   0e01     movlw	0x1                	MOVLW	0x01
000608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00060a   ec03     call	0x806, 0            	CALL	_delay_ms
00060c   f004
00060e   0e02     movlw	0x2                	MOVLW	0x02
000610   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	512; main.c	PS3_2 = 0;
000612   9880     bcf	0x80, 0x4, 0         	BCF	_PORTAbits, 4
                                           ;	.line	513; main.c	Port3[1]--;
000614   c08c     movff	0x8c, 0            	MOVFF	(_Port3 + 1), r0x00
000616   f000
000618   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00061a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00061c   0100     movlb	0                  	BANKSEL	(_Port3 + 1)
00061e   6f8c     movwf	0x8c, 0x1          	MOVWF	(_Port3 + 1), B
                                           ;	.line	514; main.c	LED = 0;
000620   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00244_DS_:
000622   0100     movlb	0                  	BANKSEL	(_Port3 + 2)
                                           ;	.line	516; main.c	if(Port3[2])
000624   518d     movf	0x8d, 0, 0x1        	MOVF	(_Port3 + 2), W, B
000626   e012     bz	0x64c                 	BZ	_00246_DS_
                                           ;	.line	518; main.c	LED = 1;
000628   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	519; main.c	PS3_3 = 1;
00062a   8a80     bsf	0x80, 0x5, 0         	BSF	_PORTAbits, 5
                                           ;	.line	520; main.c	delay_ms(1);
00062c   0e00     movlw	0                  	MOVLW	0x00
00062e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000630   0e01     movlw	0x1                	MOVLW	0x01
000632   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000634   ec03     call	0x806, 0            	CALL	_delay_ms
000636   f004
000638   0e02     movlw	0x2                	MOVLW	0x02
00063a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	521; main.c	PS3_3 = 0;
00063c   9a80     bcf	0x80, 0x5, 0         	BCF	_PORTAbits, 5
                                           ;	.line	522; main.c	Port3[2]--;
00063e   c08d     movff	0x8d, 0            	MOVFF	(_Port3 + 2), r0x00
000640   f000
000642   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000644   5000     movf	0, 0, 0             	MOVF	r0x00, W
000646   0100     movlb	0                  	BANKSEL	(_Port3 + 2)
000648   6f8d     movwf	0x8d, 0x1          	MOVWF	(_Port3 + 2), B
                                           ;	.line	523; main.c	LED = 0;
00064a   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00246_DS_:
00064c   0100     movlb	0                  	BANKSEL	(_Port3 + 3)
                                           ;	.line	525; main.c	if(Port3[3])
00064e   518e     movf	0x8e, 0, 0x1        	MOVF	(_Port3 + 3), W, B
000650   e012     bz	0x676                 	BZ	_00248_DS_
                                           ;	.line	527; main.c	LED = 1;
000652   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	528; main.c	PS3_4 = 1;
000654   8084     bsf	0x84, 0, 0           	BSF	_PORTEbits, 0
                                           ;	.line	529; main.c	delay_ms(1);
000656   0e00     movlw	0                  	MOVLW	0x00
000658   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00065a   0e01     movlw	0x1                	MOVLW	0x01
00065c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00065e   ec03     call	0x806, 0            	CALL	_delay_ms
000660   f004
000662   0e02     movlw	0x2                	MOVLW	0x02
000664   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	530; main.c	PS3_4 = 0;
000666   9084     bcf	0x84, 0, 0           	BCF	_PORTEbits, 0
                                           ;	.line	531; main.c	Port3[3]--;
000668   c08e     movff	0x8e, 0            	MOVFF	(_Port3 + 3), r0x00
00066a   f000
00066c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00066e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000670   0100     movlb	0                  	BANKSEL	(_Port3 + 3)
000672   6f8e     movwf	0x8e, 0x1          	MOVWF	(_Port3 + 3), B
                                           ;	.line	532; main.c	LED = 0;
000674   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00248_DS_:
000676   0100     movlb	0                  	BANKSEL	_Port4
                                           ;	.line	536; main.c	if(Port4[0])
000678   518f     movf	0x8f, 0, 0x1        	MOVF	_Port4, W, B
00067a   e012     bz	0x6a0                 	BZ	_00250_DS_
                                           ;	.line	538; main.c	LED = 1;
00067c   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	539; main.c	PS4_1 = 1;
00067e   8284     bsf	0x84, 0x1, 0         	BSF	_PORTEbits, 1
                                           ;	.line	540; main.c	delay_ms(1);
000680   0e00     movlw	0                  	MOVLW	0x00
000682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000684   0e01     movlw	0x1                	MOVLW	0x01
000686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000688   ec03     call	0x806, 0            	CALL	_delay_ms
00068a   f004
00068c   0e02     movlw	0x2                	MOVLW	0x02
00068e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	541; main.c	PS4_1 = 0;
000690   9284     bcf	0x84, 0x1, 0         	BCF	_PORTEbits, 1
                                           ;	.line	542; main.c	Port4[0]--;
000692   c08f     movff	0x8f, 0            	MOVFF	_Port4, r0x00
000694   f000
000696   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000698   5000     movf	0, 0, 0             	MOVF	r0x00, W
00069a   0100     movlb	0                  	BANKSEL	_Port4
00069c   6f8f     movwf	0x8f, 0x1          	MOVWF	_Port4, B
                                           ;	.line	543; main.c	LED = 0;
00069e   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00250_DS_:
0006a0   0100     movlb	0                  	BANKSEL	(_Port4 + 1)
                                           ;	.line	545; main.c	if(Port4[1])
0006a2   5190     movf	0x90, 0, 0x1        	MOVF	(_Port4 + 1), W, B
0006a4   e012     bz	0x6ca                 	BZ	_00252_DS_
                                           ;	.line	547; main.c	LED = 1;
0006a6   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	548; main.c	PS4_2 = 1;
0006a8   8484     bsf	0x84, 0x2, 0         	BSF	_PORTEbits, 2
                                           ;	.line	549; main.c	delay_ms(1);
0006aa   0e00     movlw	0                  	MOVLW	0x00
0006ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ae   0e01     movlw	0x1                	MOVLW	0x01
0006b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006b2   ec03     call	0x806, 0            	CALL	_delay_ms
0006b4   f004
0006b6   0e02     movlw	0x2                	MOVLW	0x02
0006b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	550; main.c	PS4_2 = 0;
0006ba   9484     bcf	0x84, 0x2, 0         	BCF	_PORTEbits, 2
                                           ;	.line	551; main.c	Port4[1]--;
0006bc   c090     movff	0x90, 0            	MOVFF	(_Port4 + 1), r0x00
0006be   f000
0006c0   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0006c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006c4   0100     movlb	0                  	BANKSEL	(_Port4 + 1)
0006c6   6f90     movwf	0x90, 0x1          	MOVWF	(_Port4 + 1), B
                                           ;	.line	552; main.c	LED = 0;
0006c8   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00252_DS_:
0006ca   0100     movlb	0                  	BANKSEL	(_Port4 + 2)
                                           ;	.line	554; main.c	if(Port4[2])
0006cc   5191     movf	0x91, 0, 0x1        	MOVF	(_Port4 + 2), W, B
0006ce   e012     bz	0x6f4                 	BZ	_00254_DS_
                                           ;	.line	556; main.c	LED = 1;
0006d0   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	557; main.c	PS4_3 = 1;
0006d2   8e83     bsf	0x83, 0x7, 0         	BSF	_PORTDbits, 7
                                           ;	.line	558; main.c	delay_ms(1);
0006d4   0e00     movlw	0                  	MOVLW	0x00
0006d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006d8   0e01     movlw	0x1                	MOVLW	0x01
0006da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006dc   ec03     call	0x806, 0            	CALL	_delay_ms
0006de   f004
0006e0   0e02     movlw	0x2                	MOVLW	0x02
0006e2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	559; main.c	PS4_3 = 0;
0006e4   9e83     bcf	0x83, 0x7, 0         	BCF	_PORTDbits, 7
                                           ;	.line	560; main.c	Port4[2]--;
0006e6   c091     movff	0x91, 0            	MOVFF	(_Port4 + 2), r0x00
0006e8   f000
0006ea   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0006ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006ee   0100     movlb	0                  	BANKSEL	(_Port4 + 2)
0006f0   6f91     movwf	0x91, 0x1          	MOVWF	(_Port4 + 2), B
                                           ;	.line	561; main.c	LED = 0;
0006f2   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00254_DS_:
0006f4   0100     movlb	0                  	BANKSEL	(_Port4 + 3)
                                           ;	.line	563; main.c	if(Port4[3])
0006f6   5192     movf	0x92, 0, 0x1        	MOVF	(_Port4 + 3), W, B
0006f8   e012     bz	0x71e                 	BZ	_00256_DS_
                                           ;	.line	565; main.c	LED = 1;
0006fa   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	566; main.c	PS4_4 = 1;
0006fc   8c83     bsf	0x83, 0x6, 0         	BSF	_PORTDbits, 6
                                           ;	.line	567; main.c	delay_ms(1);
0006fe   0e00     movlw	0                  	MOVLW	0x00
000700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000702   0e01     movlw	0x1                	MOVLW	0x01
000704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000706   ec03     call	0x806, 0            	CALL	_delay_ms
000708   f004
00070a   0e02     movlw	0x2                	MOVLW	0x02
00070c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	568; main.c	PS4_4 = 0;
00070e   9c83     bcf	0x83, 0x6, 0         	BCF	_PORTDbits, 6
                                           ;	.line	569; main.c	Port4[3]--;
000710   c092     movff	0x92, 0            	MOVFF	(_Port4 + 3), r0x00
000712   f000
000714   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000716   5000     movf	0, 0, 0             	MOVF	r0x00, W
000718   0100     movlb	0                  	BANKSEL	(_Port4 + 3)
00071a   6f92     movwf	0x92, 0x1          	MOVWF	(_Port4 + 3), B
                                           ;	.line	570; main.c	LED = 0;
00071c   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           _00256_DS_:
00071e   0100     movlb	0                  	BANKSEL	_fifo
                                           ;	.line	574; main.c	fifo[0] = 0x00;
000720   6b94     clrf	0x94, 0x1           	CLRF	_fifo, B
                                           ;	.line	575; main.c	round %= 4;
000722   0e03     movlw	0x3                	MOVLW	0x03
000724   0100     movlb	0                  	BANKSEL	_round
000726   1781     andwf	0x81, 0x1, 0x1     	ANDWF	_round, F, B
000728   0100     movlb	0                  	BANKSEL	_round
                                           ;	.line	576; main.c	round += 1;
00072a   2b81     incf	0x81, 0x1, 0x1      	INCF	_round, F, B
00072c   efa9     goto	0x152               	GOTO	_00258_DS_
00072e   f000
000730   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__timer0_isr	code
                                           _timer0_isr:
                                           ;	.line	211; main.c	void timer0_isr(void) interrupt 1
000c06   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000c08   ffe5
000c0a   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000c0c   ffe5
000c0e   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000c10   ffe5
000c12   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000c14   ffe5
000c16   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000c18   ffe5
000c1a   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000c1c   ffe5
000c1e   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000c20   ffe5
000c22   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000c24   ffe5
000c26   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000c28   ffe5
000c2a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c2c   ffe5
000c2e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c30   ffd9
                                           ;	.line	213; main.c	INTCONbits.TMR0IE = 0;
000c32   9af2     bcf	0xf2, 0x5, 0         	BCF	_INTCONbits, 5
                                           ;	.line	214; main.c	timeOut = 1;
000c34   0e01     movlw	0x1                	MOVLW	0x01
000c36   0100     movlb	0                  	BANKSEL	_timeOut
000c38   6fa0     movwf	0xa0, 0x1          	MOVWF	_timeOut, B
                                           ;	.line	215; main.c	INTCONbits.TMR0IF = 0;
000c3a   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	216; main.c	INTCONbits.TMR0IE = 1;
000c3c   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
000c3e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000c40   ffd9
000c42   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000c44   fffb
000c46   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000c48   fffa
000c4a   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000c4c   ffea
000c4e   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000c50   ffe9
000c52   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000c54   fff4
000c56   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000c58   fff3
000c5a   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000c5c   ffe0
000c5e   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000c60   ffd8
000c62   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
000c64   ffe8
000c66   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_main__en_idle	code
                                           _en_idle:
                                           ;	.line	173; main.c	void en_idle(){
000d64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d66   ffe5
000d68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d6a   ffd9
                                           ;	.line	174; main.c	wr_command(0x82, 0x59); // leaves BaseBand and Synthesizer active
000d6c   0e59     movlw	0x59               	MOVLW	0x59
000d6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d70   0e82     movlw	0x82               	MOVLW	0x82
000d72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d74   ec5e     call	0xcbc, 0            	CALL	_wr_command
000d76   f006
000d78   0e02     movlw	0x2                	MOVLW	0x02
000d7a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	175; main.c	wr_command(0x80, 0x28);
000d7c   0e28     movlw	0x28               	MOVLW	0x28
000d7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d80   0e80     movlw	0x80               	MOVLW	0x80
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   ec5e     call	0xcbc, 0            	CALL	_wr_command
000d86   f006
000d88   0e02     movlw	0x2                	MOVLW	0x02
000d8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d8c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d8e   ffd9
000d90   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__en_tx	code
                                           _en_tx:
                                           ;	.line	168; main.c	void en_tx() {
000d92   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d94   ffe5
000d96   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d98   ffd9
                                           ;	.line	169; main.c	wr_command(0x80, 0xD8);
000d9a   0ed8     movlw	0xd8               	MOVLW	0xd8
000d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d9e   0e80     movlw	0x80               	MOVLW	0x80
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   ec5e     call	0xcbc, 0            	CALL	_wr_command
000da4   f006
000da6   0e02     movlw	0x2                	MOVLW	0x02
000da8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	170; main.c	wr_command(0x82, 0x39);
000daa   0e39     movlw	0x39               	MOVLW	0x39
000dac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dae   0e82     movlw	0x82               	MOVLW	0x82
000db0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000db2   ec5e     call	0xcbc, 0            	CALL	_wr_command
000db4   f006
000db6   0e02     movlw	0x2                	MOVLW	0x02
000db8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000dba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dbc   ffd9
000dbe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__en_rx	code
                                           _en_rx:
                                           ;	.line	163; main.c	void en_rx(){
000dc0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000dc2   ffe5
000dc4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000dc6   ffd9
                                           ;	.line	164; main.c	wr_command(0x80, 0x68);
000dc8   0e68     movlw	0x68               	MOVLW	0x68
000dca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dcc   0e80     movlw	0x80               	MOVLW	0x80
000dce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd0   ec5e     call	0xcbc, 0            	CALL	_wr_command
000dd2   f006
000dd4   0e02     movlw	0x2                	MOVLW	0x02
000dd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	165; main.c	wr_command(0x82, 0xD9);
000dd8   0ed9     movlw	0xd9               	MOVLW	0xd9
000dda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ddc   0e82     movlw	0x82               	MOVLW	0x82
000dde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000de0   ec5e     call	0xcbc, 0            	CALL	_wr_command
000de2   f006
000de4   0e02     movlw	0x2                	MOVLW	0x02
000de6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000de8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dea   ffd9
000dec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__wr_command	code
                                           _wr_command:
                                           ;	.line	147; main.c	void wr_command( uchar tx_uchar1, uchar tx_uchar2){
000cbc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000cbe   ffe5
000cc0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000cc2   ffd9
000cc4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000cc6   ffe5
000cc8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000cca   ffe5
000ccc   0e02     movlw	0x2                	MOVLW	0x02
000cce   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000cd0   f000
000cd2   0e03     movlw	0x3                	MOVLW	0x03
000cd4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000cd6   f001
                                           ;	.line	148; main.c	nSEL = 0;
000cd8   9482     bcf	0x82, 0x2, 0         	BCF	_PORTCbits, 2
                                           ;	.line	149; main.c	spi_trx(tx_uchar1);
000cda   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ecf7     call	0xdee, 0            	CALL	_spi_trx
000ce0   f006
000ce2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	150; main.c	spi_trx(tx_uchar2); 
000ce4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ce8   ecf7     call	0xdee, 0            	CALL	_spi_trx
000cea   f006
000cec   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	151; main.c	nSEL = 1;
000cee   8482     bsf	0x82, 0x2, 0         	BSF	_PORTCbits, 2
000cf0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cf2   f001
000cf4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cf6   f000
000cf8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cfa   ffd9
000cfc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__wr_register	code
                                           _wr_register:
                                           ;	.line	140; main.c	void wr_register( uchar tx_uchar1, uchar tx_uchar2, uchar* rx_uchar){
000ad0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ad2   ffe5
000ad4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ad6   ffd9
000ad8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ada   ffe5
000adc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ade   ffe5
000ae0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000ae2   ffe5
000ae4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ae6   ffe5
000ae8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000aea   ffe5
000aec   0e02     movlw	0x2                	MOVLW	0x02
000aee   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000af0   f000
000af2   0e03     movlw	0x3                	MOVLW	0x03
000af4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000af6   f001
000af8   0e04     movlw	0x4                	MOVLW	0x04
000afa   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000afc   f002
000afe   0e05     movlw	0x5                	MOVLW	0x05
000b00   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000b02   f003
000b04   0e06     movlw	0x6                	MOVLW	0x06
000b06   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000b08   f004
                                           ;	.line	141; main.c	nSEL = 0;
000b0a   9482     bcf	0x82, 0x2, 0         	BCF	_PORTCbits, 2
                                           ;	.line	142; main.c	rx_uchar[0] = spi_trx(tx_uchar1);
000b0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b10   ecf7     call	0xdee, 0            	CALL	_spi_trx
000b12   f006
000b14   6e00     movwf	0, 0               	MOVWF	r0x00
000b16   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b18   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b1a   ffe5
000b1c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000b1e   ffe9
000b20   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
000b22   fff3
000b24   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b26   ec21     call	0xe42, 0            	CALL	__gptrput1
000b28   f007
                                           ;	.line	143; main.c	rx_uchar[1] = spi_trx(tx_uchar2); 
000b2a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000b2c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000b2e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000b30   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000b32   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000b34   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b38   ecf7     call	0xdee, 0            	CALL	_spi_trx
000b3a   f006
000b3c   6e00     movwf	0, 0               	MOVWF	r0x00
000b3e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b40   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b42   ffe5
000b44   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000b46   ffe9
000b48   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
000b4a   fff3
000b4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000b4e   ec21     call	0xe42, 0            	CALL	__gptrput1
000b50   f007
                                           ;	.line	144; main.c	nSEL = 1;
000b52   8482     bsf	0x82, 0x2, 0         	BSF	_PORTCbits, 2
000b54   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000b56   f004
000b58   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000b5a   f003
000b5c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000b5e   f002
000b60   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b62   f001
000b64   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b66   f000
000b68   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000b6a   ffd9
000b6c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__spi_trx	code
                                           _spi_trx:
                                           ;	.line	124; main.c	uchar spi_trx( uchar txData){
000dee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000df0   ffe5
000df2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000df4   ffd9
000df6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000df8   ffe5
000dfa   0e02     movlw	0x2                	MOVLW	0x02
000dfc   cfdb     movff	0xfdb, 0xfc9       	MOVFF	PLUSW2, _SSPBUF
000dfe   ffc9
                                           _00152_DS_:
                                           ;	.line	127; main.c	while(!PIR1bits.SSPIF);
000e00   a69e     btfss	0x9e, 0x3, 0       	BTFSS	_PIR1bits, 3
000e02   d7fe     bra	0xe00                	BRA	_00152_DS_
                                           ;	.line	128; main.c	rxData = SSPBUF;
000e04   cfc9     movff	0xfc9, 0           	MOVFF	_SSPBUF, r0x00
000e06   f000
                                           ;	.line	129; main.c	PIR1bits.SSPIF = 0;
000e08   969e     bcf	0x9e, 0x3, 0         	BCF	_PIR1bits, 3
                                           ;	.line	130; main.c	return rxData;
000e0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e0c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e0e   f000
000e10   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e12   ffd9
000e14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__blinkLed	code
                                           _blinkLed:
                                           ;	.line	114; main.c	void blinkLed(uchar times) {
000c68   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c6a   ffe5
000c6c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c6e   ffd9
000c70   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c72   ffe5
000c74   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c76   ffe5
000c78   0e02     movlw	0x2                	MOVLW	0x02
000c7a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000c7c   f000
                                           ;	.line	116; main.c	for(i=0;i<times;i++){
000c7e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00138_DS_:
000c80   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c82   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000c84   e214     bc	0xcae                 	BC	_00142_DS_
                                           ;	.line	117; main.c	LED = 1;
000c86   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	118; main.c	delay_ms(50);
000c88   0e00     movlw	0                  	MOVLW	0x00
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   0e32     movlw	0x32               	MOVLW	0x32
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   ec03     call	0x806, 0            	CALL	_delay_ms
000c92   f004
000c94   0e02     movlw	0x2                	MOVLW	0x02
000c96   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	119; main.c	LED = 0;
000c98   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           ;	.line	120; main.c	delay_ms(50);
000c9a   0e00     movlw	0                  	MOVLW	0x00
000c9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c9e   0e32     movlw	0x32               	MOVLW	0x32
000ca0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca2   ec03     call	0x806, 0            	CALL	_delay_ms
000ca4   f004
000ca6   0e02     movlw	0x2                	MOVLW	0x02
000ca8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	116; main.c	for(i=0;i<times;i++){
000caa   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cac   d7e9     bra	0xc80                	BRA	_00138_DS_
                                           _00142_DS_:
000cae   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cb0   f001
000cb2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cb4   f000
000cb6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cb8   ffd9
000cba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay_s	code
                                           _delay_s:
                                           ;	.line	110; main.c	void delay_s(uint value){
000cfe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d00   ffe5
000d02   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d04   ffd9
000d06   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d08   ffe5
000d0a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d0c   ffe5
000d0e   0e02     movlw	0x2                	MOVLW	0x02
000d10   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d12   f000
000d14   0e03     movlw	0x3                	MOVLW	0x03
000d16   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000d18   f001
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	111; main.c	delay1mtcy(value * 2);
000d1a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000d1c   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000d1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d20   ec99     call	0x732, 0            	CALL	_delay1mtcy
000d22   f003
000d24   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d26   f001
000d28   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d2a   f000
000d2c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d2e   ffd9
000d30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay_ms	code
                                           _delay_ms:
                                           ;	.line	102; main.c	void delay_ms(uint value){
000806   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000808   ffe5
00080a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00080c   ffd9
00080e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000810   ffe5
000812   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000814   ffe5
000816   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000818   ffe5
00081a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00081c   ffe5
00081e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000820   ffe5
000822   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000824   ffe5
000826   0e02     movlw	0x2                	MOVLW	0x02
000828   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00082a   f000
00082c   0e03     movlw	0x3                	MOVLW	0x03
00082e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000830   f001
                                           ;	.line	104; main.c	uint times = (value*2) / 0x00FF;
000832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000834   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000836   5000     movf	0, 0, 0             	MOVF	r0x00, W
000838   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00083a   0e00     movlw	0                  	MOVLW	0x00
00083c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00083e   0e02     movlw	0x2                	MOVLW	0x02
000840   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000842   ec18     call	0xa30, 0            	CALL	__mulint
000844   f005
000846   6e00     movwf	0, 0               	MOVWF	r0x00
000848   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00084a   f001
00084c   0e04     movlw	0x4                	MOVLW	0x04
00084e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000850   0e00     movlw	0                  	MOVLW	0x00
000852   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000854   0eff     movlw	0xff               	MOVLW	0xff
000856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000858   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00085a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00085c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00085e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000860   ecc3     call	0x986, 0            	CALL	__divuint
000862   f004
000864   6e02     movwf	0x2, 0             	MOVWF	r0x02
000866   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000868   f003
00086a   0e04     movlw	0x4                	MOVLW	0x04
00086c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	105; main.c	uint rest = (value*2) % 0x00FF;
00086e   0e00     movlw	0                  	MOVLW	0x00
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   0eff     movlw	0xff               	MOVLW	0xff
000874   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000876   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000878   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00087c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00087e   ec67     call	0x8ce, 0            	CALL	__moduint
000880   f004
000882   6e00     movwf	0, 0               	MOVWF	r0x00
000884   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000886   f001
000888   0e04     movlw	0x4                	MOVLW	0x04
00088a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	106; main.c	for(t = 0; t < times; t++) delay1ktcy(0xFF);
00088c   6a04     clrf	0x4, 0              	CLRF	r0x04
00088e   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           _00119_DS_:
000890   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000892   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
000894   e102     bnz	0x89a                	BNZ	_00128_DS_
000896   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000898   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00128_DS_:
00089a   e207     bc	0x8aa                 	BC	_00122_DS_
00089c   0eff     movlw	0xff               	MOVLW	0xff
00089e   ecf0     call	0x7e0, 0            	CALL	_delay1ktcy
0008a0   f003
0008a2   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0008a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008a6   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0008a8   d7f3     bra	0x890                	BRA	_00119_DS_
                                           _00122_DS_:
                                           ;	.line	107; main.c	delay1ktcy(rest);
0008aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008ac   ecf0     call	0x7e0, 0            	CALL	_delay1ktcy
0008ae   f003
0008b0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0008b2   f005
0008b4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0008b6   f004
0008b8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0008ba   f003
0008bc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0008be   f002
0008c0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008c2   f001
0008c4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0008c6   f000
0008c8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0008ca   ffd9
0008cc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay_us	code
                                           _delay_us:
                                           ;	.line	95; main.c	void delay_us(uchar value){
000d32   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d34   ffe5
000d36   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d38   ffd9
000d3a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d3c   ffe5
000d3e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d40   ffe5
000d42   0e02     movlw	0x2                	MOVLW	0x02
000d44   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d46   f000
                                           ;	.line	97; main.c	for(t=0; t < value; t++) {
000d48   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00105_DS_:
000d4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d4c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000d4e   e203     bc	0xd56                 	BC	_00109_DS_
000d50   0000     nop                      	nop 
                                           ;	.line	97; main.c	for(t=0; t < value; t++) {
000d52   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000d54   d7fa     bra	0xd4a                	BRA	_00105_DS_
                                           _00109_DS_:
000d56   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d58   f001
000d5a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d5c   f000
000d5e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d60   ffd9
000d62   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2718 (0x0a9e) bytes ( 2.07%)
                                           ;           	 1359 (0x054f) words
                                           ; udata size:	    7 (0x0007) bytes ( 0.18%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
