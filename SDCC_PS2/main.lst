gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 9-7-2010  01:26:05
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                                           ; This file was generated Tue Sep 07 01:26:05 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4620
                                           	__config 0x300001, 0xb8
                                           	__config 0x300002, 0xf9
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0x7d
                                           	__config 0x300006, 0x81
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _portP1
                                           	global _portP2
                                           	global _portP3
                                           	global _portP4
                                           	global _fifo
                                           	global _idx
                                           	global _dataTx
                                           	global _checksum
                                           	global _timeOut
                                           	global _port
                                           	global _delay_us
                                           	global _delay_ms
                                           	global _delay_s
                                           	global _blinkLed
                                           	global _spi_trx
                                           	global _putc
                                           	global _wr_register
                                           	global _wr_command
                                           	global _en_rx
                                           	global _en_tx
                                           	global _en_idle
                                           	global _portb_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _EEADRH
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay1ktcy
                                           	extern _delay1mtcy
                                           	extern __mulint
                                           	extern __divuint
                                           	extern __moduint
                                           	extern ___fsgt
                                           	extern ___fssub
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _portP1	db	0x00
                                           _portP2	db	0x00
                                           _portP3	db	0x00
                                           _portP4	db	0x00
                                           _idx	db	0x00
                                           _checksum	db	0x00
                                           _port	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           udata_main_0	udata
                                           _timeOut	res	4
                                           
                                           udata_main_1	udata
                                           _fifo	res	2
                                           
                                           udata_main_2	udata
                                           _dataTx	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x1_portb_isr	code	0X000008
                                           ivec_0x1_portb_isr:
000008   efb4     goto	0x768               	GOTO	_portb_isr
00000a   f003
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	205; main.c	OSCCONbits.IRCF = 7;
000400   50d3     movf	0xd3, 0, 0          	MOVF	_OSCCONbits, W
000402   0b8f     andlw	0x8f               	ANDLW	0x8f
000404   0970     iorlw	0x70               	IORLW	0x70
000406   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCONbits
                                           ;	.line	208; main.c	TRISAbits.TRISA6 = 0; // LED output
000408   9c92     bcf	0x92, 0x6, 0         	BCF	_TRISAbits, 6
                                           ;	.line	209; main.c	LED = 0; // output low
00040a   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           ;	.line	210; main.c	TRISDbits.TRISD6 = 0;
00040c   9c95     bcf	0x95, 0x6, 0         	BCF	_TRISDbits, 6
                                           ;	.line	211; main.c	PORTDbits.RD6 = 0;
00040e   9c83     bcf	0x83, 0x6, 0         	BCF	_PORTDbits, 6
                                           ;	.line	214; main.c	PORTB = 0xFF;
000410   0eff     movlw	0xff               	MOVLW	0xff
000412   6e81     movwf	0x81, 0            	MOVWF	_PORTB
                                           ;	.line	215; main.c	TRISB = 0x00;
000414   6a93     clrf	0x93, 0             	CLRF	_TRISB
                                           ;	.line	216; main.c	TRISB = 0xFF;
000416   0eff     movlw	0xff               	MOVLW	0xff
000418   6e93     movwf	0x93, 0            	MOVWF	_TRISB
                                           ;	.line	217; main.c	INTCON2bits.RBPU = 0; // enable weak pull-up
00041a   9ef1     bcf	0xf1, 0x7, 0         	BCF	_INTCON2bits, 7
                                           ;	.line	220; main.c	TRISCbits.TRISC0 = 0; // nRES
00041c   9094     bcf	0x94, 0, 0           	BCF	_TRISCbits, 0
                                           ;	.line	221; main.c	TRISCbits.TRISC1 = 0; // nFFS
00041e   9294     bcf	0x94, 0x1, 0         	BCF	_TRISCbits, 1
                                           ;	.line	222; main.c	TRISCbits.TRISC2 = 1;
000420   8494     bsf	0x94, 0x2, 0         	BSF	_TRISCbits, 2
                                           ;	.line	223; main.c	nRES = 1;
000422   8082     bsf	0x82, 0, 0           	BSF	_PORTCbits, 0
                                           ;	.line	224; main.c	nFFS = 1;
000424   8282     bsf	0x82, 0x1, 0         	BSF	_PORTCbits, 1
                                           ;	.line	227; main.c	INTCONbits.RBIF = 0;
000426   90f2     bcf	0xf2, 0, 0           	BCF	_INTCONbits, 0
                                           ;	.line	228; main.c	INTCONbits.RBIE = 1; // RB4-7 change interrupt
000428   86f2     bsf	0xf2, 0x3, 0         	BSF	_INTCONbits, 3
                                           ;	.line	229; main.c	INTCON2bits.RBIP = 1;
00042a   80f1     bsf	0xf1, 0, 0           	BSF	_INTCON2bits, 0
                                           ;	.line	230; main.c	INTCONbits.GIE = 1; // global interrupts
00042c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	267; main.c	TRISCbits.TRISC5 = 0; // SDO
00042e   9a94     bcf	0x94, 0x5, 0         	BCF	_TRISCbits, 5
                                           ;	.line	268; main.c	TRISCbits.TRISC4 = 1; // SDI
000430   8894     bsf	0x94, 0x4, 0         	BSF	_TRISCbits, 4
                                           ;	.line	269; main.c	TRISCbits.TRISC3 = 0; // SCK
000432   9694     bcf	0x94, 0x3, 0         	BCF	_TRISCbits, 3
                                           ;	.line	270; main.c	TRISCbits.TRISC2 = 0; // nSEL
000434   9494     bcf	0x94, 0x2, 0         	BCF	_TRISCbits, 2
                                           ;	.line	271; main.c	nSEL = 1;
000436   8482     bsf	0x82, 0x2, 0         	BSF	_PORTCbits, 2
                                           ;	.line	272; main.c	SSPCON1bits.SSPEN = 1; // enable SPI
000438   8ac6     bsf	0xc6, 0x5, 0         	BSF	_SSPCON1bits, 5
                                           ;	.line	273; main.c	SSPCON1bits.CKP = 0; // idle bit low
00043a   98c6     bcf	0xc6, 0x4, 0         	BCF	_SSPCON1bits, 4
                                           ;	.line	274; main.c	SSPCON1bits.SSPM0 = 0; // cleared Fosc/4 master mode. set for Fosc/16
00043c   90c6     bcf	0xc6, 0, 0           	BCF	_SSPCON1bits, 0
                                           ;	.line	275; main.c	SSPSTATbits.SMP = 0; // sampled in the middle
00043e   9ec7     bcf	0xc7, 0x7, 0         	BCF	_SSPSTATbits, 7
                                           ;	.line	276; main.c	SSPSTATbits.CKE = 1; // transmit for idle to active
000440   8cc7     bsf	0xc7, 0x6, 0         	BSF	_SSPSTATbits, 6
                                           ;	.line	277; main.c	SSPCON1bits.WCOL = 0;
000442   9ec6     bcf	0xc6, 0x7, 0         	BCF	_SSPCON1bits, 7
                                           ;	.line	278; main.c	PIE1bits.SSPIE = 1; // enable SPI flag
000444   869d     bsf	0x9d, 0x3, 0         	BSF	_PIE1bits, 3
                                           ;	.line	281; main.c	delay_ms(100);
000446   0e00     movlw	0                  	MOVLW	0x00
000448   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00044a   0e64     movlw	0x64               	MOVLW	0x64
00044c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00044e   ec1b     call	0xc36, 0            	CALL	_delay_ms
000450   f006
000452   0e02     movlw	0x2                	MOVLW	0x02
000454   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	282; main.c	nRES = 0;
000456   9082     bcf	0x82, 0, 0           	BCF	_PORTCbits, 0
                                           ;	.line	283; main.c	delay_ms(5);
000458   0e00     movlw	0                  	MOVLW	0x00
00045a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045c   0e05     movlw	0x5                	MOVLW	0x05
00045e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000460   ec1b     call	0xc36, 0            	CALL	_delay_ms
000462   f006
000464   0e02     movlw	0x2                	MOVLW	0x02
000466   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	284; main.c	nRES = 1;
000468   8082     bsf	0x82, 0, 0           	BSF	_PORTCbits, 0
                                           ;	.line	285; main.c	delay_ms(200);
00046a   0e00     movlw	0                  	MOVLW	0x00
00046c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00046e   0ec8     movlw	0xc8               	MOVLW	0xc8
000470   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000472   ec1b     call	0xc36, 0            	CALL	_delay_ms
000474   f006
000476   0e02     movlw	0x2                	MOVLW	0x02
000478   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	286; main.c	wr_command(0x00, 0x00); // clear POR interrupt
00047a   0e00     movlw	0                  	MOVLW	0x00
00047c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00047e   0e00     movlw	0                  	MOVLW	0x00
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   ec45     call	0x108a, 0           	CALL	_wr_command
000484   f008
000486   0e02     movlw	0x2                	MOVLW	0x02
000488   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	287; main.c	delay_ms(100);
00048a   0e00     movlw	0                  	MOVLW	0x00
00048c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00048e   0e64     movlw	0x64               	MOVLW	0x64
000490   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000492   ec1b     call	0xc36, 0            	CALL	_delay_ms
000494   f006
000496   0e02     movlw	0x2                	MOVLW	0x02
000498   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	290; main.c	wr_command(0x80, 0x28); // Config setting command all FIFO + 868 + 12.5pF
00049a   0e28     movlw	0x28               	MOVLW	0x28
00049c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00049e   0e80     movlw	0x80               	MOVLW	0x80
0004a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a2   ec45     call	0x108a, 0           	CALL	_wr_command
0004a4   f008
0004a6   0e02     movlw	0x2                	MOVLW	0x02
0004a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	291; main.c	wr_command(0x82, 0x09); // Power Management Command. Idle + noClkOut
0004aa   0e09     movlw	0x9                	MOVLW	0x09
0004ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ae   0e82     movlw	0x82               	MOVLW	0x82
0004b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004b2   ec45     call	0x108a, 0           	CALL	_wr_command
0004b4   f008
0004b6   0e02     movlw	0x2                	MOVLW	0x02
0004b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	292; main.c	wr_command(0xCA, 0x82); // FIFO fill when Synchon Pattern received. 2 bytes Synchon
0004ba   0e82     movlw	0x82               	MOVLW	0x82
0004bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004be   0eca     movlw	0xca               	MOVLW	0xca
0004c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c2   ec45     call	0x108a, 0           	CALL	_wr_command
0004c4   f008
0004c6   0e02     movlw	0x2                	MOVLW	0x02
0004c8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	293; main.c	wr_command(0xCE, 0xA5); // Set 2nd byte to 0xA5
0004ca   0ea5     movlw	0xa5               	MOVLW	0xa5
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   0ece     movlw	0xce               	MOVLW	0xce
0004d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004d2   ec45     call	0x108a, 0           	CALL	_wr_command
0004d4   f008
0004d6   0e02     movlw	0x2                	MOVLW	0x02
0004d8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	296; main.c	blinkLed(5);
0004da   0e05     movlw	0x5                	MOVLW	0x05
0004dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004de   ec1b     call	0x1036, 0           	CALL	_blinkLed
0004e0   f008
0004e2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00245_DS_:
0004e4   0100     movlb	0                  	BANKSEL	_fifo
                                           ;	.line	300; main.c	fifo[0] = 0;
0004e6   6bb6     clrf	0xb6, 0x1           	CLRF	_fifo, B
0004e8   0100     movlb	0                  	BANKSEL	(_fifo + 1)
                                           ;	.line	301; main.c	fifo[1] = 0;
0004ea   6bb7     clrf	0xb7, 0x1           	CLRF	(_fifo + 1), B
0004ec   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	303; main.c	idx = 0;
0004ee   6b84     clrf	0x84, 0x1           	CLRF	_idx, B
                                           ;	.line	304; main.c	en_rx();
0004f0   ecc7     call	0x118e, 0           	CALL	_en_rx
0004f2   f008
0004f4   0100     movlb	0                  	BANKSEL	_timeOut
                                           ;	.line	305; main.c	timeOut = 0x00000FFF;
0004f6   6b8e     clrf	0x8e, 0x1           	CLRF	_timeOut, B
0004f8   0ef0     movlw	0xf0               	MOVLW	0xf0
0004fa   0100     movlb	0                  	BANKSEL	(_timeOut + 1)
0004fc   6f8f     movwf	0x8f, 0x1          	MOVWF	(_timeOut + 1), B
0004fe   0e7f     movlw	0x7f               	MOVLW	0x7f
000500   0100     movlb	0                  	BANKSEL	(_timeOut + 2)
000502   6f90     movwf	0x90, 0x1          	MOVWF	(_timeOut + 2), B
000504   0e45     movlw	0x45               	MOVLW	0x45
000506   0100     movlb	0                  	BANKSEL	(_timeOut + 3)
000508   6f91     movwf	0x91, 0x1          	MOVWF	(_timeOut + 3), B
                                           _00213_DS_:
                                           ;	.line	309; main.c	while( (idx < 2) & (timeOut > 0) ){
00050a   0e02     movlw	0x2                	MOVLW	0x02
00050c   0100     movlb	0                  	BANKSEL	_idx
00050e   5d84     subwf	0x84, 0, 0x1       	SUBWF	_idx, W, B
000510   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
000512   6a00     clrf	0, 0                	CLRF	r0x00
000514   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000516   0e00     movlw	0                  	MOVLW	0x00
000518   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00051a   0e00     movlw	0                  	MOVLW	0x00
00051c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00051e   0e00     movlw	0                  	MOVLW	0x00
000520   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000522   0e00     movlw	0                  	MOVLW	0x00
000524   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000526   0100     movlb	0                  	BANKSEL	(_timeOut + 3)
000528   5191     movf	0x91, 0, 0x1        	MOVF	(_timeOut + 3), W, B
00052a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00052c   0100     movlb	0                  	BANKSEL	(_timeOut + 2)
00052e   5190     movf	0x90, 0, 0x1        	MOVF	(_timeOut + 2), W, B
000530   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000532   0100     movlb	0                  	BANKSEL	(_timeOut + 1)
000534   518f     movf	0x8f, 0, 0x1        	MOVF	(_timeOut + 1), W, B
000536   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000538   0100     movlb	0                  	BANKSEL	_timeOut
00053a   518e     movf	0x8e, 0, 0x1        	MOVF	_timeOut, W, B
00053c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00053e   ec21     call	0xa42, 0            	CALL	___fsgt
000540   f005
000542   6e01     movwf	0x1, 0             	MOVWF	r0x01
000544   0e08     movlw	0x8                	MOVLW	0x08
000546   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000548   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00054a   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00054c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000550   d05f     bra	0x610                	BRA	_00215_DS_
                                           _00210_DS_:
                                           ;	.line	310; main.c	while(!FFIT & (timeOut > 0)) timeOut--;
000552   6a00     clrf	0, 0                	CLRF	r0x00
000554   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000556   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000558   5000     movf	0, 0, 0             	MOVF	r0x00, W
00055a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00055c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00055e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000560   6a00     clrf	0, 0                	CLRF	r0x00
000562   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000564   0e00     movlw	0                  	MOVLW	0x00
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   0e00     movlw	0                  	MOVLW	0x00
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   0e00     movlw	0                  	MOVLW	0x00
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   0e00     movlw	0                  	MOVLW	0x00
000572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000574   0100     movlb	0                  	BANKSEL	(_timeOut + 3)
000576   5191     movf	0x91, 0, 0x1        	MOVF	(_timeOut + 3), W, B
000578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00057a   0100     movlb	0                  	BANKSEL	(_timeOut + 2)
00057c   5190     movf	0x90, 0, 0x1        	MOVF	(_timeOut + 2), W, B
00057e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000580   0100     movlb	0                  	BANKSEL	(_timeOut + 1)
000582   518f     movf	0x8f, 0, 0x1        	MOVF	(_timeOut + 1), W, B
000584   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000586   0100     movlb	0                  	BANKSEL	_timeOut
000588   518e     movf	0x8e, 0, 0x1        	MOVF	_timeOut, W, B
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   ec21     call	0xa42, 0            	CALL	___fsgt
00058e   f005
000590   6e01     movwf	0x1, 0             	MOVWF	r0x01
000592   0e08     movlw	0x8                	MOVLW	0x08
000594   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000596   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000598   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00059a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00059c   e021     bz	0x5e0                 	BZ	_00212_DS_
00059e   0e3f     movlw	0x3f               	MOVLW	0x3f
0005a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005a2   0e80     movlw	0x80               	MOVLW	0x80
0005a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005a6   0e00     movlw	0                  	MOVLW	0x00
0005a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005aa   0e00     movlw	0                  	MOVLW	0x00
0005ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005ae   0100     movlb	0                  	BANKSEL	(_timeOut + 3)
0005b0   5191     movf	0x91, 0, 0x1        	MOVF	(_timeOut + 3), W, B
0005b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b4   0100     movlb	0                  	BANKSEL	(_timeOut + 2)
0005b6   5190     movf	0x90, 0, 0x1        	MOVF	(_timeOut + 2), W, B
0005b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005ba   0100     movlb	0                  	BANKSEL	(_timeOut + 1)
0005bc   518f     movf	0x8f, 0, 0x1        	MOVF	(_timeOut + 1), W, B
0005be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c0   0100     movlb	0                  	BANKSEL	_timeOut
0005c2   518e     movf	0x8e, 0, 0x1        	MOVF	_timeOut, W, B
0005c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005c6   ec77     call	0x8ee, 0            	CALL	___fssub
0005c8   f004
0005ca   0100     movlb	0                  	BANKSEL	_timeOut
0005cc   6f8e     movwf	0x8e, 0x1          	MOVWF	_timeOut, B
0005ce   cff3     movff	0xff3, 0x8f        	MOVFF	PRODL, (_timeOut + 1)
0005d0   f08f
0005d2   cff4     movff	0xff4, 0x90        	MOVFF	PRODH, (_timeOut + 2)
0005d4   f090
0005d6   cfe9     movff	0xfe9, 0x91        	MOVFF	FSR0L, (_timeOut + 3)
0005d8   f091
0005da   0e08     movlw	0x8                	MOVLW	0x08
0005dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0005de   d7b9     bra	0x552                	BRA	_00210_DS_
                                           _00212_DS_:
                                           ;	.line	311; main.c	nFFS = 0;
0005e0   9282     bcf	0x82, 0x1, 0         	BCF	_PORTCbits, 1
                                           ;	.line	312; main.c	fifo[idx++] = spi_trx(0x00);
0005e2   c084     movff	0x84, 0            	MOVFF	_idx, r0x00
0005e4   f000
0005e6   0100     movlb	0                  	BANKSEL	_idx
0005e8   2b84     incf	0x84, 0x1, 0x1      	INCF	_idx, F, B
0005ea   6a01     clrf	0x1, 0              	CLRF	r0x01
0005ec   0eb6     movlw	0xb6               	MOVLW	LOW(_fifo)
0005ee   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005f0   0e00     movlw	0                  	MOVLW	HIGH(_fifo)
0005f2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0005f4   0e00     movlw	0                  	MOVLW	0x00
0005f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f8   ecde     call	0x11bc, 0           	CALL	_spi_trx
0005fa   f008
0005fc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005fe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000600   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000602   ffe9
000604   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
000606   ffea
000608   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
00060a   ffef
                                           ;	.line	313; main.c	nFFS = 1;
00060c   8282     bsf	0x82, 0x1, 0         	BSF	_PORTCbits, 1
00060e   d77d     bra	0x50a                	BRA	_00213_DS_
                                           _00215_DS_:
                                           ;	.line	316; main.c	en_idle();
000610   ec99     call	0x1132, 0           	CALL	_en_idle
000612   f008
000614   0100     movlb	0                  	BANKSEL	_timeOut
                                           ;	.line	317; main.c	if(timeOut == 0) {
000616   518e     movf	0x8e, 0, 0x1        	MOVF	_timeOut, W, B
000618   0100     movlb	0                  	BANKSEL	(_timeOut + 1)
00061a   118f     iorwf	0x8f, 0, 0x1       	IORWF	(_timeOut + 1), W, B
00061c   0100     movlb	0                  	BANKSEL	(_timeOut + 2)
00061e   1190     iorwf	0x90, 0, 0x1       	IORWF	(_timeOut + 2), W, B
000620   0100     movlb	0                  	BANKSEL	(_timeOut + 3)
000622   1191     iorwf	0x91, 0, 0x1       	IORWF	(_timeOut + 3), W, B
000624   e101     bnz	0x628                	BNZ	_00217_DS_
                                           ;	.line	319; main.c	LED = 1;
000626   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           _00217_DS_:
                                           ;	.line	323; main.c	if(fifo[0] == 0x5A & fifo[1] == ID)
000628   6a00     clrf	0, 0                	CLRF	r0x00
00062a   0100     movlb	0                  	BANKSEL	_fifo
00062c   51b6     movf	0xb6, 0, 0x1        	MOVF	_fifo, W, B
00062e   0a5a     xorlw	0x5a               	XORLW	0x5a
000630   e101     bnz	0x634                	BNZ	_00274_DS_
000632   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00274_DS_:
000634   6a01     clrf	0x1, 0              	CLRF	r0x01
000636   0100     movlb	0                  	BANKSEL	(_fifo + 1)
000638   51b7     movf	0xb7, 0, 0x1        	MOVF	(_fifo + 1), W, B
00063a   0a02     xorlw	0x2                	XORLW	0x02
00063c   e101     bnz	0x640                	BNZ	_00276_DS_
00063e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
                                           _00276_DS_:
000640   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000642   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000644   5000     movf	0, 0, 0             	MOVF	r0x00, W
000646   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000648   d74d     bra	0x4e4                	BRA	_00245_DS_
                                           ;	.line	325; main.c	LED=1;
00064a   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
00064c   0100     movlb	0                  	BANKSEL	_portP1
                                           ;	.line	327; main.c	dataTx[0] = portP1;
00064e   5180     movf	0x80, 0, 0x1        	MOVF	_portP1, W, B
000650   0100     movlb	0                  	BANKSEL	_dataTx
000652   6f88     movwf	0x88, 0x1          	MOVWF	_dataTx, B
000654   0100     movlb	0                  	BANKSEL	_portP2
                                           ;	.line	328; main.c	dataTx[1] = portP2;
000656   5181     movf	0x81, 0, 0x1        	MOVF	_portP2, W, B
000658   0100     movlb	0                  	BANKSEL	(_dataTx + 1)
00065a   6f89     movwf	0x89, 0x1          	MOVWF	(_dataTx + 1), B
00065c   0100     movlb	0                  	BANKSEL	_portP3
                                           ;	.line	329; main.c	dataTx[2] = portP3;
00065e   5182     movf	0x82, 0, 0x1        	MOVF	_portP3, W, B
000660   0100     movlb	0                  	BANKSEL	(_dataTx + 2)
000662   6f8a     movwf	0x8a, 0x1          	MOVWF	(_dataTx + 2), B
000664   0100     movlb	0                  	BANKSEL	_portP4
                                           ;	.line	330; main.c	dataTx[3] = portP4;
000666   5183     movf	0x83, 0, 0x1        	MOVF	_portP4, W, B
000668   0100     movlb	0                  	BANKSEL	(_dataTx + 3)
00066a   6f8b     movwf	0x8b, 0x1          	MOVWF	(_dataTx + 3), B
                                           ;	.line	332; main.c	en_tx();
00066c   ecb0     call	0x1160, 0           	CALL	_en_tx
00066e   f008
000670   0100     movlb	0                  	BANKSEL	_idx
                                           ;	.line	333; main.c	idx = 0;
000672   6b84     clrf	0x84, 0x1           	CLRF	_idx, B
000674   0100     movlb	0                  	BANKSEL	_checksum
                                           ;	.line	334; main.c	checksum = 0;
000676   6b85     clrf	0x85, 0x1           	CLRF	_checksum, B
                                           _00218_DS_:
                                           ;	.line	335; main.c	while(nIRQ);
000678   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
00067a   d7fe     bra	0x678                	BRA	_00218_DS_
                                           ;	.line	336; main.c	wr_command(0xB8, 0x2D);
00067c   0e2d     movlw	0x2d               	MOVLW	0x2d
00067e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000680   0eb8     movlw	0xb8               	MOVLW	0xb8
000682   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000684   ec45     call	0x108a, 0           	CALL	_wr_command
000686   f008
000688   0e02     movlw	0x2                	MOVLW	0x02
00068a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00221_DS_:
                                           ;	.line	337; main.c	while(nIRQ);
00068c   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
00068e   d7fe     bra	0x68c                	BRA	_00221_DS_
                                           ;	.line	338; main.c	wr_command(0xB8, 0xA5);
000690   0ea5     movlw	0xa5               	MOVLW	0xa5
000692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000694   0eb8     movlw	0xb8               	MOVLW	0xb8
000696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000698   ec45     call	0x108a, 0           	CALL	_wr_command
00069a   f008
00069c   0e02     movlw	0x2                	MOVLW	0x02
00069e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00224_DS_:
                                           ;	.line	339; main.c	while(nIRQ);
0006a0   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
0006a2   d7fe     bra	0x6a0                	BRA	_00224_DS_
                                           ;	.line	340; main.c	wr_command(0xB8, 0x5A);
0006a4   0e5a     movlw	0x5a               	MOVLW	0x5a
0006a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006a8   0eb8     movlw	0xb8               	MOVLW	0xb8
0006aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ac   ec45     call	0x108a, 0           	CALL	_wr_command
0006ae   f008
0006b0   0e02     movlw	0x2                	MOVLW	0x02
0006b2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00230_DS_:
                                           ;	.line	341; main.c	while(idx < 4){
0006b4   0e04     movlw	0x4                	MOVLW	0x04
0006b6   0100     movlb	0                  	BANKSEL	_idx
0006b8   5d84     subwf	0x84, 0, 0x1       	SUBWF	_idx, W, B
0006ba   e22a     bc	0x710                 	BC	_00233_DS_
                                           ;	.line	342; main.c	checksum += dataTx[idx];
0006bc   0e88     movlw	0x88               	MOVLW	LOW(_dataTx)
0006be   0100     movlb	0                  	BANKSEL	_idx
0006c0   2584     addwf	0x84, 0, 0x1       	ADDWF	_idx, W, B
0006c2   6e00     movwf	0, 0               	MOVWF	r0x00
0006c4   6a01     clrf	0x1, 0              	CLRF	r0x01
0006c6   0e00     movlw	0                  	MOVLW	HIGH(_dataTx)
0006c8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0006ca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006cc   ffe9
0006ce   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0006d0   ffea
0006d2   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0006d4   f000
0006d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006d8   0100     movlb	0                  	BANKSEL	_checksum
0006da   2785     addwf	0x85, 0x1, 0x1     	ADDWF	_checksum, F, B
                                           _00227_DS_:
                                           ;	.line	343; main.c	while(nIRQ);
0006dc   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
0006de   d7fe     bra	0x6dc                	BRA	_00227_DS_
                                           ;	.line	344; main.c	wr_command(0xB8, dataTx[idx++]);
0006e0   c084     movff	0x84, 0            	MOVFF	_idx, r0x00
0006e2   f000
0006e4   0100     movlb	0                  	BANKSEL	_idx
0006e6   2b84     incf	0x84, 0x1, 0x1      	INCF	_idx, F, B
0006e8   6a01     clrf	0x1, 0              	CLRF	r0x01
0006ea   0e88     movlw	0x88               	MOVLW	LOW(_dataTx)
0006ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0006ee   0e00     movlw	0                  	MOVLW	HIGH(_dataTx)
0006f0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0006f2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006f4   ffe9
0006f6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0006f8   ffea
0006fa   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0006fc   f000
0006fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000702   0eb8     movlw	0xb8               	MOVLW	0xb8
000704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000706   ec45     call	0x108a, 0           	CALL	_wr_command
000708   f008
00070a   0e02     movlw	0x2                	MOVLW	0x02
00070c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00070e   d7d2     bra	0x6b4                	BRA	_00230_DS_
                                           _00233_DS_:
                                           ;	.line	346; main.c	while(nIRQ);
000710   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
000712   d7fe     bra	0x710                	BRA	_00233_DS_
000714   0100     movlb	0                  	BANKSEL	_checksum
                                           ;	.line	347; main.c	wr_command(0xB8, checksum);
000716   5185     movf	0x85, 0, 0x1        	MOVF	_checksum, W, B
000718   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00071a   0eb8     movlw	0xb8               	MOVLW	0xb8
00071c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00071e   ec45     call	0x108a, 0           	CALL	_wr_command
000720   f008
000722   0e02     movlw	0x2                	MOVLW	0x02
000724   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00236_DS_:
                                           ;	.line	348; main.c	while(nIRQ);
000726   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
000728   d7fe     bra	0x726                	BRA	_00236_DS_
                                           ;	.line	349; main.c	wr_command(0xB8, 0xEF);
00072a   0eef     movlw	0xef               	MOVLW	0xef
00072c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00072e   0eb8     movlw	0xb8               	MOVLW	0xb8
000730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000732   ec45     call	0x108a, 0           	CALL	_wr_command
000734   f008
000736   0e02     movlw	0x2                	MOVLW	0x02
000738   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00239_DS_:
                                           ;	.line	350; main.c	while(nIRQ);
00073a   b081     btfsc	0x81, 0, 0         	BTFSC	_PORTBbits, 0
00073c   d7fe     bra	0x73a                	BRA	_00239_DS_
                                           ;	.line	351; main.c	en_idle();
00073e   ec99     call	0x1132, 0           	CALL	_en_idle
000740   f008
000742   0100     movlb	0                  	BANKSEL	_dataTx
                                           ;	.line	353; main.c	portP1 -= dataTx[0];
000744   5188     movf	0x88, 0, 0x1        	MOVF	_dataTx, W, B
000746   0100     movlb	0                  	BANKSEL	_portP1
000748   5f80     subwf	0x80, 0x1, 0x1     	SUBWF	_portP1, F, B
00074a   0100     movlb	0                  	BANKSEL	(_dataTx + 1)
                                           ;	.line	354; main.c	portP2 -= dataTx[1];
00074c   5189     movf	0x89, 0, 0x1        	MOVF	(_dataTx + 1), W, B
00074e   0100     movlb	0                  	BANKSEL	_portP2
000750   5f81     subwf	0x81, 0x1, 0x1     	SUBWF	_portP2, F, B
000752   0100     movlb	0                  	BANKSEL	(_dataTx + 2)
                                           ;	.line	355; main.c	portP3 -= dataTx[2];
000754   518a     movf	0x8a, 0, 0x1        	MOVF	(_dataTx + 2), W, B
000756   0100     movlb	0                  	BANKSEL	_portP3
000758   5f82     subwf	0x82, 0x1, 0x1     	SUBWF	_portP3, F, B
00075a   0100     movlb	0                  	BANKSEL	(_dataTx + 3)
                                           ;	.line	356; main.c	portP4 -= dataTx[3];
00075c   518b     movf	0x8b, 0, 0x1        	MOVF	(_dataTx + 3), W, B
00075e   0100     movlb	0                  	BANKSEL	_portP4
000760   5f83     subwf	0x83, 0x1, 0x1     	SUBWF	_portP4, F, B
                                           ;	.line	358; main.c	LED = 0;
000762   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
000764   d6bf     bra	0x4e4                	BRA	_00245_DS_
000766   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__portb_isr	code
                                           _portb_isr:
                                           ;	.line	169; main.c	void portb_isr (void) interrupt 1
000768   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00076a   ffe5
00076c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00076e   ffe5
000770   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000772   ffe5
000774   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000776   ffe5
000778   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00077a   ffe5
00077c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00077e   ffe5
000780   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000782   ffe5
000784   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000786   ffe5
000788   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00078a   ffe5
00078c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00078e   ffe5
000790   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000792   ffd9
000794   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000796   ffe5
000798   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00079a   ffe5
                                           ;	.line	171; main.c	INTCONbits.RBIE = 0;
00079c   96f2     bcf	0xf2, 0x3, 0         	BCF	_INTCONbits, 3
                                           ;	.line	172; main.c	if(!PORTBbits.RB7 & port.p1) {
00079e   6a00     clrf	0, 0                	CLRF	r0x00
0007a0   be81     btfsc	0x81, 0x7, 0       	BTFSC	_PORTBbits, 7
0007a2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0007a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007a6   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0007a8   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0007aa   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0007ac   6a00     clrf	0, 0                	CLRF	r0x00
0007ae   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0007b0   6a01     clrf	0x1, 0              	CLRF	r0x01
0007b2   0100     movlb	0                  	BANKSEL	_port
0007b4   b186     btfsc	0x86, 0, 0x1       	BTFSC	_port, 0, B
0007b6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0007b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007ba   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0007bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007be   e005     bz	0x7ca                 	BZ	_00194_DS_
0007c0   0100     movlb	0                  	BANKSEL	_portP1
                                           ;	.line	173; main.c	portP1++;
0007c2   2b80     incf	0x80, 0x1, 0x1      	INCF	_portP1, F, B
0007c4   0100     movlb	0                  	BANKSEL	_port
                                           ;	.line	174; main.c	port.p1 = 0;
0007c6   9186     bcf	0x86, 0, 0x1         	BCF	_port, 0, B
0007c8   d00c     bra	0x7e2                	BRA	_00195_DS_
                                           _00194_DS_:
                                           ;	.line	175; main.c	} else port.p1 = PORTBbits.RB7;
0007ca   6a00     clrf	0, 0                	CLRF	r0x00
0007cc   be81     btfsc	0x81, 0x7, 0       	BTFSC	_PORTBbits, 7
0007ce   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0007d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007d2   0b01     andlw	0x1                	ANDLW	0x01
0007d4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0007d6   0100     movlb	0                  	BANKSEL	_port
0007d8   5186     movf	0x86, 0, 0x1        	MOVF	_port, W, B
0007da   0bfe     andlw	0xfe               	ANDLW	0xfe
0007dc   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0007de   0100     movlb	0                  	BANKSEL	_port
0007e0   6f86     movwf	0x86, 0x1          	MOVWF	_port, B
                                           _00195_DS_:
                                           ;	.line	176; main.c	if(!PORTBbits.RB6 & port.p2) {
0007e2   6a00     clrf	0, 0                	CLRF	r0x00
0007e4   bc81     btfsc	0x81, 0x6, 0       	BTFSC	_PORTBbits, 6
0007e6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0007e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007ea   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0007ec   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0007ee   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0007f0   6a00     clrf	0, 0                	CLRF	r0x00
0007f2   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0007f4   6a01     clrf	0x1, 0              	CLRF	r0x01
0007f6   0100     movlb	0                  	BANKSEL	_port
0007f8   b386     btfsc	0x86, 0x1, 0x1     	BTFSC	_port, 1, B
0007fa   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0007fc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007fe   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000800   5000     movf	0, 0, 0             	MOVF	r0x00, W
000802   e005     bz	0x80e                 	BZ	_00197_DS_
000804   0100     movlb	0                  	BANKSEL	_portP2
                                           ;	.line	177; main.c	portP2++;
000806   2b81     incf	0x81, 0x1, 0x1      	INCF	_portP2, F, B
000808   0100     movlb	0                  	BANKSEL	_port
                                           ;	.line	178; main.c	port.p2 = 0;
00080a   9386     bcf	0x86, 0x1, 0x1       	BCF	_port, 1, B
00080c   d00d     bra	0x828                	BRA	_00198_DS_
                                           _00197_DS_:
                                           ;	.line	179; main.c	} else port.p2 = PORTBbits.RB6;
00080e   6a00     clrf	0, 0                	CLRF	r0x00
000810   bc81     btfsc	0x81, 0x6, 0       	BTFSC	_PORTBbits, 6
000812   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000814   5000     movf	0, 0, 0             	MOVF	r0x00, W
000816   0b01     andlw	0x1                	ANDLW	0x01
000818   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00081a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00081c   0100     movlb	0                  	BANKSEL	_port
00081e   5186     movf	0x86, 0, 0x1        	MOVF	_port, W, B
000820   0bfd     andlw	0xfd               	ANDLW	0xfd
000822   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000824   0100     movlb	0                  	BANKSEL	_port
000826   6f86     movwf	0x86, 0x1          	MOVWF	_port, B
                                           _00198_DS_:
                                           ;	.line	180; main.c	if(!PORTBbits.RB5 & port.p3) {
000828   6a00     clrf	0, 0                	CLRF	r0x00
00082a   ba81     btfsc	0x81, 0x5, 0       	BTFSC	_PORTBbits, 5
00082c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00082e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000830   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000832   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000834   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000836   6a00     clrf	0, 0                	CLRF	r0x00
000838   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00083a   6a01     clrf	0x1, 0              	CLRF	r0x01
00083c   0100     movlb	0                  	BANKSEL	_port
00083e   b586     btfsc	0x86, 0x2, 0x1     	BTFSC	_port, 2, B
000840   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000842   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000844   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000846   5000     movf	0, 0, 0             	MOVF	r0x00, W
000848   e005     bz	0x854                 	BZ	_00200_DS_
00084a   0100     movlb	0                  	BANKSEL	_portP3
                                           ;	.line	181; main.c	portP3++;
00084c   2b82     incf	0x82, 0x1, 0x1      	INCF	_portP3, F, B
00084e   0100     movlb	0                  	BANKSEL	_port
                                           ;	.line	182; main.c	port.p3 = 0;
000850   9586     bcf	0x86, 0x2, 0x1       	BCF	_port, 2, B
000852   d00e     bra	0x870                	BRA	_00201_DS_
                                           _00200_DS_:
                                           ;	.line	183; main.c	} else port.p3 = PORTBbits.RB5;
000854   6a00     clrf	0, 0                	CLRF	r0x00
000856   ba81     btfsc	0x81, 0x5, 0       	BTFSC	_PORTBbits, 5
000858   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00085a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00085c   0b01     andlw	0x1                	ANDLW	0x01
00085e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000860   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000862   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000864   0100     movlb	0                  	BANKSEL	_port
000866   5186     movf	0x86, 0, 0x1        	MOVF	_port, W, B
000868   0bfb     andlw	0xfb               	ANDLW	0xfb
00086a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00086c   0100     movlb	0                  	BANKSEL	_port
00086e   6f86     movwf	0x86, 0x1          	MOVWF	_port, B
                                           _00201_DS_:
                                           ;	.line	184; main.c	if(!PORTBbits.RB4 & port.p4) {
000870   6a00     clrf	0, 0                	CLRF	r0x00
000872   b881     btfsc	0x81, 0x4, 0       	BTFSC	_PORTBbits, 4
000874   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000876   5000     movf	0, 0, 0             	MOVF	r0x00, W
000878   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00087a   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00087c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00087e   6a00     clrf	0, 0                	CLRF	r0x00
000880   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000882   6a01     clrf	0x1, 0              	CLRF	r0x01
000884   0100     movlb	0                  	BANKSEL	_port
000886   b786     btfsc	0x86, 0x3, 0x1     	BTFSC	_port, 3, B
000888   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00088a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00088c   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
00088e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000890   e005     bz	0x89c                 	BZ	_00203_DS_
000892   0100     movlb	0                  	BANKSEL	_portP4
                                           ;	.line	185; main.c	portP4++;
000894   2b83     incf	0x83, 0x1, 0x1      	INCF	_portP4, F, B
000896   0100     movlb	0                  	BANKSEL	_port
                                           ;	.line	186; main.c	port.p4 = 0;
000898   9786     bcf	0x86, 0x3, 0x1       	BCF	_port, 3, B
00089a   d00e     bra	0x8b8                	BRA	_00204_DS_
                                           _00203_DS_:
                                           ;	.line	187; main.c	} else port.p4 = PORTBbits.RB4;
00089c   6a00     clrf	0, 0                	CLRF	r0x00
00089e   b881     btfsc	0x81, 0x4, 0       	BTFSC	_PORTBbits, 4
0008a0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0008a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008a4   0b01     andlw	0x1                	ANDLW	0x01
0008a6   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0008a8   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0008aa   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0008ac   0100     movlb	0                  	BANKSEL	_port
0008ae   5186     movf	0x86, 0, 0x1        	MOVF	_port, W, B
0008b0   0bf7     andlw	0xf7               	ANDLW	0xf7
0008b2   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0008b4   0100     movlb	0                  	BANKSEL	_port
0008b6   6f86     movwf	0x86, 0x1          	MOVWF	_port, B
                                           _00204_DS_:
                                           ;	.line	188; main.c	INTCONbits.RBIF = 0;
0008b8   90f2     bcf	0xf2, 0, 0           	BCF	_INTCONbits, 0
                                           ;	.line	189; main.c	INTCONbits.RBIE = 1;
0008ba   86f2     bsf	0xf2, 0x3, 0         	BSF	_INTCONbits, 3
0008bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008be   f001
0008c0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0008c2   f000
0008c4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0008c6   ffd9
0008c8   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0008ca   fffb
0008cc   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0008ce   fffa
0008d0   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0008d2   ffea
0008d4   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0008d6   ffe9
0008d8   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0008da   fff4
0008dc   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0008de   fff3
0008e0   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0008e2   ffe0
0008e4   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0008e6   ffd8
0008e8   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0008ea   ffe8
0008ec   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_main__en_idle	code
                                           _en_idle:
                                           ;	.line	151; main.c	void en_idle(){
001132   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001134   ffe5
001136   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001138   ffd9
                                           ;	.line	152; main.c	wr_command(0x82, 0x59); // leaves BaseBand and Synthesizer active
00113a   0e59     movlw	0x59               	MOVLW	0x59
00113c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00113e   0e82     movlw	0x82               	MOVLW	0x82
001140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001142   ec45     call	0x108a, 0           	CALL	_wr_command
001144   f008
001146   0e02     movlw	0x2                	MOVLW	0x02
001148   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	153; main.c	wr_command(0x80, 0x28);
00114a   0e28     movlw	0x28               	MOVLW	0x28
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   0e80     movlw	0x80               	MOVLW	0x80
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   ec45     call	0x108a, 0           	CALL	_wr_command
001154   f008
001156   0e02     movlw	0x2                	MOVLW	0x02
001158   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00115a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00115c   ffd9
00115e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__en_tx	code
                                           _en_tx:
                                           ;	.line	146; main.c	void en_tx() {
001160   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001162   ffe5
001164   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001166   ffd9
                                           ;	.line	147; main.c	wr_command(0x80, 0xD8);
001168   0ed8     movlw	0xd8               	MOVLW	0xd8
00116a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00116c   0e80     movlw	0x80               	MOVLW	0x80
00116e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001170   ec45     call	0x108a, 0           	CALL	_wr_command
001172   f008
001174   0e02     movlw	0x2                	MOVLW	0x02
001176   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	148; main.c	wr_command(0x82, 0x39);
001178   0e39     movlw	0x39               	MOVLW	0x39
00117a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00117c   0e82     movlw	0x82               	MOVLW	0x82
00117e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001180   ec45     call	0x108a, 0           	CALL	_wr_command
001182   f008
001184   0e02     movlw	0x2                	MOVLW	0x02
001186   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001188   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00118a   ffd9
00118c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__en_rx	code
                                           _en_rx:
                                           ;	.line	141; main.c	void en_rx(){
00118e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001190   ffe5
001192   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001194   ffd9
                                           ;	.line	142; main.c	wr_command(0x80, 0x68);
001196   0e68     movlw	0x68               	MOVLW	0x68
001198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00119a   0e80     movlw	0x80               	MOVLW	0x80
00119c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00119e   ec45     call	0x108a, 0           	CALL	_wr_command
0011a0   f008
0011a2   0e02     movlw	0x2                	MOVLW	0x02
0011a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	143; main.c	wr_command(0x82, 0xD9);
0011a6   0ed9     movlw	0xd9               	MOVLW	0xd9
0011a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011aa   0e82     movlw	0x82               	MOVLW	0x82
0011ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ae   ec45     call	0x108a, 0           	CALL	_wr_command
0011b0   f008
0011b2   0e02     movlw	0x2                	MOVLW	0x02
0011b4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011b6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011b8   ffd9
0011ba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__wr_command	code
                                           _wr_command:
                                           ;	.line	122; main.c	void wr_command( uchar tx_uchar1, uchar tx_uchar2){
00108a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00108c   ffe5
00108e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001090   ffd9
001092   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001094   ffe5
001096   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001098   ffe5
00109a   0e02     movlw	0x2                	MOVLW	0x02
00109c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00109e   f000
0010a0   0e03     movlw	0x3                	MOVLW	0x03
0010a2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0010a4   f001
                                           ;	.line	123; main.c	nSEL = 0;
0010a6   9482     bcf	0x82, 0x2, 0         	BCF	_PORTCbits, 2
                                           ;	.line	124; main.c	spi_trx(tx_uchar1);
0010a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ac   ecde     call	0x11bc, 0           	CALL	_spi_trx
0010ae   f008
0010b0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	125; main.c	spi_trx(tx_uchar2); 
0010b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010b6   ecde     call	0x11bc, 0           	CALL	_spi_trx
0010b8   f008
0010ba   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	126; main.c	nSEL = 1;
0010bc   8482     bsf	0x82, 0x2, 0         	BSF	_PORTCbits, 2
0010be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010c0   f001
0010c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010c4   f000
0010c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0010c8   ffd9
0010ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__wr_register	code
                                           _wr_register:
                                           ;	.line	115; main.c	void wr_register( uchar tx_uchar1, uchar tx_uchar2, uchar* rx_uchar){
000f00   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f02   ffe5
000f04   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f06   ffd9
000f08   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f0a   ffe5
000f0c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f0e   ffe5
000f10   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f12   ffe5
000f14   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000f16   ffe5
000f18   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000f1a   ffe5
000f1c   0e02     movlw	0x2                	MOVLW	0x02
000f1e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000f20   f000
000f22   0e03     movlw	0x3                	MOVLW	0x03
000f24   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000f26   f001
000f28   0e04     movlw	0x4                	MOVLW	0x04
000f2a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000f2c   f002
000f2e   0e05     movlw	0x5                	MOVLW	0x05
000f30   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000f32   f003
000f34   0e06     movlw	0x6                	MOVLW	0x06
000f36   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000f38   f004
                                           ;	.line	116; main.c	nSEL = 0;
000f3a   9482     bcf	0x82, 0x2, 0         	BCF	_PORTCbits, 2
                                           ;	.line	117; main.c	rx_uchar[0] = spi_trx(tx_uchar1);
000f3c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f40   ecde     call	0x11bc, 0           	CALL	_spi_trx
000f42   f008
000f44   6e00     movwf	0, 0               	MOVWF	r0x00
000f46   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000f48   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f4a   ffe5
000f4c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000f4e   ffe9
000f50   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
000f52   fff3
000f54   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f56   ec0a     call	0x1214, 0           	CALL	__gptrput1
000f58   f009
                                           ;	.line	118; main.c	rx_uchar[1] = spi_trx(tx_uchar2); 
000f5a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000f5c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f5e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000f60   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f62   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000f64   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f68   ecde     call	0x11bc, 0           	CALL	_spi_trx
000f6a   f008
000f6c   6e00     movwf	0, 0               	MOVWF	r0x00
000f6e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000f70   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f72   ffe5
000f74   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000f76   ffe9
000f78   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
000f7a   fff3
000f7c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f7e   ec0a     call	0x1214, 0           	CALL	__gptrput1
000f80   f009
                                           ;	.line	119; main.c	nSEL = 1;
000f82   8482     bsf	0x82, 0x2, 0         	BSF	_PORTCbits, 2
000f84   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f86   f004
000f88   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f8a   f003
000f8c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f8e   f002
000f90   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f92   f001
000f94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f96   f000
000f98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f9a   ffd9
000f9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__putc	code
                                           _putc:
                                           ;	.line	110; main.c	void putc(uchar txData){
0011e4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0011e6   ffe5
0011e8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011ea   ffd9
0011ec   0e02     movlw	0x2                	MOVLW	0x02
0011ee   cfdb     movff	0xfdb, 0xfad       	MOVFF	PLUSW2, _TXREG
0011f0   ffad
                                           _00160_DS_:
                                           ;	.line	112; main.c	while(!TXSTAbits.TRMT);
0011f2   a2ac     btfss	0xac, 0x1, 0       	BTFSS	_TXSTAbits, 1
0011f4   d7fe     bra	0x11f2               	BRA	_00160_DS_
0011f6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011f8   ffd9
0011fa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__spi_trx	code
                                           _spi_trx:
                                           ;	.line	82; main.c	uchar spi_trx( uchar txData){
0011bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0011be   ffe5
0011c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011c2   ffd9
0011c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011c6   ffe5
0011c8   0e02     movlw	0x2                	MOVLW	0x02
0011ca   cfdb     movff	0xfdb, 0xfc9       	MOVFF	PLUSW2, _SSPBUF
0011cc   ffc9
                                           _00152_DS_:
                                           ;	.line	85; main.c	while(!PIR1bits.SSPIF);
0011ce   a69e     btfss	0x9e, 0x3, 0       	BTFSS	_PIR1bits, 3
0011d0   d7fe     bra	0x11ce               	BRA	_00152_DS_
                                           ;	.line	86; main.c	rxData = SSPBUF;
0011d2   cfc9     movff	0xfc9, 0           	MOVFF	_SSPBUF, r0x00
0011d4   f000
                                           ;	.line	87; main.c	PIR1bits.SSPIF = 0;
0011d6   969e     bcf	0x9e, 0x3, 0         	BCF	_PIR1bits, 3
                                           ;	.line	88; main.c	return rxData;
0011d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0011da   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0011dc   f000
0011de   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0011e0   ffd9
0011e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__blinkLed	code
                                           _blinkLed:
                                           ;	.line	72; main.c	void blinkLed(uchar times) {
001036   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001038   ffe5
00103a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00103c   ffd9
00103e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001040   ffe5
001042   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001044   ffe5
001046   0e02     movlw	0x2                	MOVLW	0x02
001048   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00104a   f000
                                           ;	.line	74; main.c	for(i=0;i<times;i++){
00104c   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00138_DS_:
00104e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001050   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
001052   e214     bc	0x107c                	BC	_00142_DS_
                                           ;	.line	75; main.c	LED = 1;
001054   8c80     bsf	0x80, 0x6, 0         	BSF	_PORTAbits, 6
                                           ;	.line	76; main.c	delay_ms(50);
001056   0e00     movlw	0                  	MOVLW	0x00
001058   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00105a   0e32     movlw	0x32               	MOVLW	0x32
00105c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00105e   ec1b     call	0xc36, 0            	CALL	_delay_ms
001060   f006
001062   0e02     movlw	0x2                	MOVLW	0x02
001064   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	77; main.c	LED = 0;
001066   9c80     bcf	0x80, 0x6, 0         	BCF	_PORTAbits, 6
                                           ;	.line	78; main.c	delay_ms(50);
001068   0e00     movlw	0                  	MOVLW	0x00
00106a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00106c   0e32     movlw	0x32               	MOVLW	0x32
00106e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001070   ec1b     call	0xc36, 0            	CALL	_delay_ms
001072   f006
001074   0e02     movlw	0x2                	MOVLW	0x02
001076   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	74; main.c	for(i=0;i<times;i++){
001078   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00107a   d7e9     bra	0x104e               	BRA	_00138_DS_
                                           _00142_DS_:
00107c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00107e   f001
001080   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001082   f000
001084   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001086   ffd9
001088   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay_s	code
                                           _delay_s:
                                           ;	.line	68; main.c	void delay_s(uint value){
0010cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0010ce   ffe5
0010d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0010d2   ffd9
0010d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0010d6   ffe5
0010d8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0010da   ffe5
0010dc   0e02     movlw	0x2                	MOVLW	0x02
0010de   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0010e0   f000
0010e2   0e03     movlw	0x3                	MOVLW	0x03
0010e4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0010e6   f001
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	69; main.c	delay1mtcy(value * 2);
0010e8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0010ea   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0010ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010ee   ecb1     call	0xb62, 0            	CALL	_delay1mtcy
0010f0   f005
0010f2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010f4   f001
0010f6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010f8   f000
0010fa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0010fc   ffd9
0010fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay_ms	code
                                           _delay_ms:
                                           ;	.line	60; main.c	void delay_ms(uint value){
000c36   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c38   ffe5
000c3a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c3c   ffd9
000c3e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c40   ffe5
000c42   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c44   ffe5
000c46   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000c48   ffe5
000c4a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000c4c   ffe5
000c4e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000c50   ffe5
000c52   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000c54   ffe5
000c56   0e02     movlw	0x2                	MOVLW	0x02
000c58   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000c5a   f000
000c5c   0e03     movlw	0x3                	MOVLW	0x03
000c5e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000c60   f001
                                           ;	.line	62; main.c	uint times = (value*2) / 0x00FF;
000c62   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c66   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6a   0e00     movlw	0                  	MOVLW	0x00
000c6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c6e   0e02     movlw	0x2                	MOVLW	0x02
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ec30     call	0xe60, 0            	CALL	__mulint
000c74   f007
000c76   6e00     movwf	0, 0               	MOVWF	r0x00
000c78   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000c7a   f001
000c7c   0e04     movlw	0x4                	MOVLW	0x04
000c7e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c80   0e00     movlw	0                  	MOVLW	0x00
000c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c84   0eff     movlw	0xff               	MOVLW	0xff
000c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c88   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c8c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   ecdb     call	0xdb6, 0            	CALL	__divuint
000c92   f006
000c94   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c96   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000c98   f003
000c9a   0e04     movlw	0x4                	MOVLW	0x04
000c9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	63; main.c	uint rest = (value*2) % 0x00FF;
000c9e   0e00     movlw	0                  	MOVLW	0x00
000ca0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca2   0eff     movlw	0xff               	MOVLW	0xff
000ca4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ca6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ca8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000caa   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cae   ec7f     call	0xcfe, 0            	CALL	__moduint
000cb0   f006
000cb2   6e00     movwf	0, 0               	MOVWF	r0x00
000cb4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000cb6   f001
000cb8   0e04     movlw	0x4                	MOVLW	0x04
000cba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	64; main.c	for(t = 0; t < times; t++) delay1ktcy(0xFF);
000cbc   6a04     clrf	0x4, 0              	CLRF	r0x04
000cbe   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           _00119_DS_:
000cc0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc2   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
000cc4   e102     bnz	0xcca                	BNZ	_00128_DS_
000cc6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cc8   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00128_DS_:
000cca   e207     bc	0xcda                 	BC	_00122_DS_
000ccc   0eff     movlw	0xff               	MOVLW	0xff
000cce   ec08     call	0xc10, 0            	CALL	_delay1ktcy
000cd0   f006
000cd2   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000cd4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000cd6   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
000cd8   d7f3     bra	0xcc0                	BRA	_00119_DS_
                                           _00122_DS_:
                                           ;	.line	65; main.c	delay1ktcy(rest);
000cda   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cdc   ec08     call	0xc10, 0            	CALL	_delay1ktcy
000cde   f006
000ce0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ce2   f005
000ce4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ce6   f004
000ce8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cea   f003
000cec   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cee   f002
000cf0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cf2   f001
000cf4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cf6   f000
000cf8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cfa   ffd9
000cfc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay_us	code
                                           _delay_us:
                                           ;	.line	53; main.c	void delay_us(uchar value){
001100   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001102   ffe5
001104   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001106   ffd9
001108   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00110a   ffe5
00110c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00110e   ffe5
001110   0e02     movlw	0x2                	MOVLW	0x02
001112   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001114   f000
                                           ;	.line	55; main.c	for(t=0; t < value; t++) {
001116   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00105_DS_:
001118   5000     movf	0, 0, 0             	MOVF	r0x00, W
00111a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00111c   e203     bc	0x1124                	BC	_00109_DS_
00111e   0000     nop                      	nop 
                                           ;	.line	55; main.c	for(t=0; t < value; t++) {
001120   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001122   d7fa     bra	0x1118               	BRA	_00105_DS_
                                           _00109_DS_:
001124   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001126   f001
001128   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00112a   f000
00112c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00112e   ffd9
001130   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2076 (0x081c) bytes ( 1.58%)
                                           ;           	 1038 (0x040e) words
                                           ; udata size:	   12 (0x000c) bytes ( 0.31%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
